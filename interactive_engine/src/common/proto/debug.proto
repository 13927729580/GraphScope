/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
option java_package = "com.alibaba.maxgraph.proto";
option java_multiple_files = true;

import "sdk/common.proto";
import "sdk/schema.proto";


message StoreTestProperty {
    int32 id = 1;
    bytes data = 2;
}

message StoreTestVertex {
    int64 vertex_id = 1;
    int32 label = 2;
    repeated StoreTestProperty properies = 3;
}

message PropertyProto {
    uint32 id = 1;
    bytes data = 2;
}

message GetVertexRequest {
    repeated int64 id = 1;
    uint32 label = 2;
    int64 snapshot_id = 3;
}

message VertexProto {
    int64 id = 1;
    uint32 label = 2;
    int64 start_si = 3;
    int64 end_si = 4;
    repeated PropertyProto properties = 5;
}

message RelationProto {
    uint32 label = 1;
    uint32 src_label = 2;
    uint32 dst_label = 3;
}

message EdgeProto {
    int64 id = 1;
    int64 src_id = 2;
    int64 dst_id = 3;
    RelationProto relation = 4;
    int64 start_si = 5;
    int64 end_si = 6;
    repeated PropertyProto properties = 7;
}

message GetOutEdgesRequest {
    int64 src_id = 1;
    int64 snapshot_id = 2;
    uint32 label = 3;
    uint64 limit = 4;
}

message GetInEdgesRequest {
    int64 dst_id = 1;
    int64 snapshot_id = 2;
    uint32 label = 3;
    uint64 limit = 4;
}

message ScanVertexRequest {
    uint32 label = 1;
    int64 snapshot_id = 2;
    uint64 limit = 3;
}

message GetSchemaRequest {
    int32 version = 1;
}

message StoreTestResponse {
    repeated StoreTestVertex vertices = 1;
    repeated StoreTestEdge edges = 2;
}

message ServerInfo {
    uint32 work_id = 1;
    string zk_url = 2;
    string graph_name = 3;
    uint32 partition_num = 4;
    uint32 download_thread_count = 5;
    uint32 load_thread_count = 6;
    string local_data_root = 7;
    uint32 listened_port = 8;
}

message StoreTestEdge {
    int64 edge_id = 1;
    int64 src_id = 2;
    int64 dst_id = 3;
    int32 label = 4;
    int32 src_label = 5;
    int32 dst_label = 6;
    repeated StoreTestProperty properies = 7;
}

message GraphInfo {
    uint64 vertex_count = 1;
    uint64 edge_count = 2;
    repeated uint32 active_partitions = 3;
    repeated ReplicaInfo replicas = 4;
}

message ReplicaInfo {
    uint32 partition_id = 1;
    uint32 label = 2;
    uint32 src_label = 3;
    uint32 dst_label = 4;
}

service DebugServiceApi {
    rpc getServerInfo(Empty) returns(ServerInfo);
    rpc getGraphInfo(Empty) returns(GraphInfo);
    rpc getVertex(GetVertexRequest) returns(stream VertexProto);
    rpc scanVertex(ScanVertexRequest) returns(stream VertexProto);
    rpc getOutEdges(GetOutEdgesRequest) returns(stream EdgeProto);
    rpc getInEdges(GetInEdgesRequest) returns(stream EdgeProto);
    rpc getSchema(GetSchemaRequest) returns(SchemaProto);
}

service StoreTestService {
    rpc getServerInfo(Empty) returns(ServerInfo);
    rpc getVertex(GetVertexRequest) returns (StoreTestResponse);
    rpc getOutEdges(GetOutEdgesRequest) returns (StoreTestResponse);
}
