/**
 * Copyright 2020 Alibaba Group Holding Limited.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

import "sdk/common.proto";

option java_package = "com.alibaba.maxgraph.proto";
option java_multiple_files = true;
option java_generate_equals_and_hash = true;
option java_generic_services = true;

message ClientDataProto {
    string typeLable                            = 1;
    string srcLable                             = 2;
    map<string, bytes> srcPKData                = 3;
    string dstLable                             = 4;
    map<string, bytes> dstPKData                = 5;
    map<string, bytes> propertyData             = 6;
    int64 srcId                                 = 7;
    int64 dstId                                 = 8;
    bool isInternalId                           = 9;
    int32 schemaVersion                         = 10;
    int64 eId                                   = 11;
    OperationType operationType                 = 12;

}

message ClientBatchDataProto {
    repeated ClientDataProto dataList = 1;
}

message RealtimeDataRequest {
    ClientDataProto Data                        = 1;
    string sessionId                            = 2;
    OperationType operationType                 = 3;
    bool sync                                   = 4;
}

message BatchRealtimeDataRequest {
    ClientBatchDataProto   dataList              = 1;
    string sessionId                             = 2;
    OperationType operationType                  = 3;
    bool sync                                    = 4;
}

message RealtimeDataResponse {
    Response response   = 1;
}

message SessionRequest {
    string sessionId            = 1;
    bool isOrderPreserving      = 2;
}

message RemoveSessionRequest {
    string sessionId            = 1;
}

message SessionResponse {
    string sessionId            = 1;
    Response response           = 2;
}

message QueryRequest {
    string executionMode     = 1;
    string query             = 2;
    int32 timeoutInSeconds   = 3;
}

message QueryResponse {
    repeated bytes result = 1;
    Response response     = 2;
}

message PrepareRequest {
    string name             = 1;
    bytes query             = 2; // String literal or bytecode gremlin query.
    bool overwrite          = 3;
}

message CreateOrUpdateSchemaRequest {
    string schemaJson   = 1;
}

message PrepareNames {
    repeated string name   = 1;
    Response resp          = 2;
}

service FrontendService {
    // query
    rpc executeQuery (QueryRequest) returns (QueryResponse) {}

    // Prepare statement api .
    rpc prepareQuery (PrepareRequest) returns (Response) {}
    rpc removePrepare (PrepareRequest) returns (Response) {}
    rpc listPrepare (Empty) returns (PrepareNames) {}

    rpc getRealTimeMetric (MetricInfoRequest) returns (MetricInfoResp) {}
    rpc getAllRealTimeMetrics (Request) returns (AllMetricsInfoResp) {}
}
