//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct InstanceInfoProto {
    // message fields
    pub assignment: ::std::collections::HashMap<i32, super::hb::PartitionProtos>,
    pub workerInfos: ::std::collections::HashMap<i32, super::hb::WorkerInfoProtos>,
    pub offlineVersion: i64,
    pub status: InstanceInfoProto_Status,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl InstanceInfoProto {
    pub fn new() -> InstanceInfoProto {
        ::std::default::Default::default()
    }

    // repeated .InstanceInfoProto.AssignmentEntry assignment = 1;

    pub fn clear_assignment(&mut self) {
        self.assignment.clear();
    }

    // Param is passed by value, moved
    pub fn set_assignment(&mut self, v: ::std::collections::HashMap<i32, super::hb::PartitionProtos>) {
        self.assignment = v;
    }

    // Mutable pointer to the field.
    pub fn mut_assignment(&mut self) -> &mut ::std::collections::HashMap<i32, super::hb::PartitionProtos> {
        &mut self.assignment
    }

    // Take field
    pub fn take_assignment(&mut self) -> ::std::collections::HashMap<i32, super::hb::PartitionProtos> {
        ::std::mem::replace(&mut self.assignment, ::std::collections::HashMap::new())
    }

    pub fn get_assignment(&self) -> &::std::collections::HashMap<i32, super::hb::PartitionProtos> {
        &self.assignment
    }

    // repeated .InstanceInfoProto.WorkerInfosEntry workerInfos = 2;

    pub fn clear_workerInfos(&mut self) {
        self.workerInfos.clear();
    }

    // Param is passed by value, moved
    pub fn set_workerInfos(&mut self, v: ::std::collections::HashMap<i32, super::hb::WorkerInfoProtos>) {
        self.workerInfos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_workerInfos(&mut self) -> &mut ::std::collections::HashMap<i32, super::hb::WorkerInfoProtos> {
        &mut self.workerInfos
    }

    // Take field
    pub fn take_workerInfos(&mut self) -> ::std::collections::HashMap<i32, super::hb::WorkerInfoProtos> {
        ::std::mem::replace(&mut self.workerInfos, ::std::collections::HashMap::new())
    }

    pub fn get_workerInfos(&self) -> &::std::collections::HashMap<i32, super::hb::WorkerInfoProtos> {
        &self.workerInfos
    }

    // int64 offlineVersion = 4;

    pub fn clear_offlineVersion(&mut self) {
        self.offlineVersion = 0;
    }

    // Param is passed by value, moved
    pub fn set_offlineVersion(&mut self, v: i64) {
        self.offlineVersion = v;
    }

    pub fn get_offlineVersion(&self) -> i64 {
        self.offlineVersion
    }

    // .InstanceInfoProto.Status status = 7;

    pub fn clear_status(&mut self) {
        self.status = InstanceInfoProto_Status::NORMAL;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: InstanceInfoProto_Status) {
        self.status = v;
    }

    pub fn get_status(&self) -> InstanceInfoProto_Status {
        self.status
    }
}

impl ::protobuf::Message for InstanceInfoProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::PartitionProtos>>(wire_type, is, &mut self.assignment)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::WorkerInfoProtos>>(wire_type, is, &mut self.workerInfos)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offlineVersion = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::PartitionProtos>>(1, &self.assignment);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::WorkerInfoProtos>>(2, &self.workerInfos);
        if self.offlineVersion != 0 {
            my_size += ::protobuf::rt::value_size(4, self.offlineVersion, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.status != InstanceInfoProto_Status::NORMAL {
            my_size += ::protobuf::rt::enum_size(7, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::PartitionProtos>>(1, &self.assignment, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::WorkerInfoProtos>>(2, &self.workerInfos, os)?;
        if self.offlineVersion != 0 {
            os.write_int64(4, self.offlineVersion)?;
        }
        if self.status != InstanceInfoProto_Status::NORMAL {
            os.write_enum(7, self.status.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceInfoProto {
        InstanceInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::PartitionProtos>>(
                    "assignment",
                    |m: &InstanceInfoProto| { &m.assignment },
                    |m: &mut InstanceInfoProto| { &mut m.assignment },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<super::hb::WorkerInfoProtos>>(
                    "workerInfos",
                    |m: &InstanceInfoProto| { &m.workerInfos },
                    |m: &mut InstanceInfoProto| { &mut m.workerInfos },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "offlineVersion",
                    |m: &InstanceInfoProto| { &m.offlineVersion },
                    |m: &mut InstanceInfoProto| { &mut m.offlineVersion },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InstanceInfoProto_Status>>(
                    "status",
                    |m: &InstanceInfoProto| { &m.status },
                    |m: &mut InstanceInfoProto| { &mut m.status },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstanceInfoProto>(
                    "InstanceInfoProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstanceInfoProto {
        static mut instance: ::protobuf::lazy::Lazy<InstanceInfoProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstanceInfoProto,
        };
        unsafe {
            instance.get(InstanceInfoProto::new)
        }
    }
}

impl ::protobuf::Clear for InstanceInfoProto {
    fn clear(&mut self) {
        self.clear_assignment();
        self.clear_workerInfos();
        self.clear_offlineVersion();
        self.clear_status();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InstanceInfoProto_Status {
    NORMAL = 0,
    ABNORMAL = 1,
}

impl ::protobuf::ProtobufEnum for InstanceInfoProto_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InstanceInfoProto_Status> {
        match value {
            0 => ::std::option::Option::Some(InstanceInfoProto_Status::NORMAL),
            1 => ::std::option::Option::Some(InstanceInfoProto_Status::ABNORMAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InstanceInfoProto_Status] = &[
            InstanceInfoProto_Status::NORMAL,
            InstanceInfoProto_Status::ABNORMAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("InstanceInfoProto_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for InstanceInfoProto_Status {
}

impl ::std::default::Default for InstanceInfoProto_Status {
    fn default() -> Self {
        InstanceInfoProto_Status::NORMAL
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceInfoProto_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstanceInfoResp {
    // message fields
    pub resp: ::protobuf::SingularPtrField<super::common::Response>,
    pub instanceInfoProto: ::protobuf::SingularPtrField<InstanceInfoProto>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl InstanceInfoResp {
    pub fn new() -> InstanceInfoResp {
        ::std::default::Default::default()
    }

    // .Response resp = 1;

    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: super::common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut super::common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> super::common::Response {
        self.resp.take().unwrap_or_else(|| super::common::Response::new())
    }

    pub fn get_resp(&self) -> &super::common::Response {
        self.resp.as_ref().unwrap_or_else(|| super::common::Response::default_instance())
    }

    // .InstanceInfoProto instanceInfoProto = 2;

    pub fn clear_instanceInfoProto(&mut self) {
        self.instanceInfoProto.clear();
    }

    pub fn has_instanceInfoProto(&self) -> bool {
        self.instanceInfoProto.is_some()
    }

    // Param is passed by value, moved
    pub fn set_instanceInfoProto(&mut self, v: InstanceInfoProto) {
        self.instanceInfoProto = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_instanceInfoProto(&mut self) -> &mut InstanceInfoProto {
        if self.instanceInfoProto.is_none() {
            self.instanceInfoProto.set_default();
        }
        self.instanceInfoProto.as_mut().unwrap()
    }

    // Take field
    pub fn take_instanceInfoProto(&mut self) -> InstanceInfoProto {
        self.instanceInfoProto.take().unwrap_or_else(|| InstanceInfoProto::new())
    }

    pub fn get_instanceInfoProto(&self) -> &InstanceInfoProto {
        self.instanceInfoProto.as_ref().unwrap_or_else(|| InstanceInfoProto::default_instance())
    }
}

impl ::protobuf::Message for InstanceInfoResp {
    fn is_initialized(&self) -> bool {
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.instanceInfoProto {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.instanceInfoProto)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.instanceInfoProto.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.instanceInfoProto.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstanceInfoResp {
        InstanceInfoResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                    "resp",
                    |m: &InstanceInfoResp| { &m.resp },
                    |m: &mut InstanceInfoResp| { &mut m.resp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InstanceInfoProto>>(
                    "instanceInfoProto",
                    |m: &InstanceInfoResp| { &m.instanceInfoProto },
                    |m: &mut InstanceInfoResp| { &mut m.instanceInfoProto },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstanceInfoResp>(
                    "InstanceInfoResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstanceInfoResp {
        static mut instance: ::protobuf::lazy::Lazy<InstanceInfoResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstanceInfoResp,
        };
        unsafe {
            instance.get(InstanceInfoResp::new)
        }
    }
}

impl ::protobuf::Clear for InstanceInfoResp {
    fn clear(&mut self) {
        self.clear_resp();
        self.clear_instanceInfoProto();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstanceInfoResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstanceInfoResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RuntimeGroupStatusResp {
    // message fields
    pub response: ::protobuf::SingularPtrField<super::common::Response>,
    pub runtimeGroupsStstus: ::std::collections::HashMap<i32, RuntimeGroupStatusResp_Status>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RuntimeGroupStatusResp {
    pub fn new() -> RuntimeGroupStatusResp {
        ::std::default::Default::default()
    }

    // .Response response = 1;

    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: super::common::Response) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut super::common::Response {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> super::common::Response {
        self.response.take().unwrap_or_else(|| super::common::Response::new())
    }

    pub fn get_response(&self) -> &super::common::Response {
        self.response.as_ref().unwrap_or_else(|| super::common::Response::default_instance())
    }

    // repeated .RuntimeGroupStatusResp.RuntimeGroupsStstusEntry runtimeGroupsStstus = 2;

    pub fn clear_runtimeGroupsStstus(&mut self) {
        self.runtimeGroupsStstus.clear();
    }

    // Param is passed by value, moved
    pub fn set_runtimeGroupsStstus(&mut self, v: ::std::collections::HashMap<i32, RuntimeGroupStatusResp_Status>) {
        self.runtimeGroupsStstus = v;
    }

    // Mutable pointer to the field.
    pub fn mut_runtimeGroupsStstus(&mut self) -> &mut ::std::collections::HashMap<i32, RuntimeGroupStatusResp_Status> {
        &mut self.runtimeGroupsStstus
    }

    // Take field
    pub fn take_runtimeGroupsStstus(&mut self) -> ::std::collections::HashMap<i32, RuntimeGroupStatusResp_Status> {
        ::std::mem::replace(&mut self.runtimeGroupsStstus, ::std::collections::HashMap::new())
    }

    pub fn get_runtimeGroupsStstus(&self) -> &::std::collections::HashMap<i32, RuntimeGroupStatusResp_Status> {
        &self.runtimeGroupsStstus
    }
}

impl ::protobuf::Message for RuntimeGroupStatusResp {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<RuntimeGroupStatusResp_Status>>(wire_type, is, &mut self.runtimeGroupsStstus)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<RuntimeGroupStatusResp_Status>>(2, &self.runtimeGroupsStstus);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<RuntimeGroupStatusResp_Status>>(2, &self.runtimeGroupsStstus, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RuntimeGroupStatusResp {
        RuntimeGroupStatusResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                    "response",
                    |m: &RuntimeGroupStatusResp| { &m.response },
                    |m: &mut RuntimeGroupStatusResp| { &mut m.response },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<RuntimeGroupStatusResp_Status>>(
                    "runtimeGroupsStstus",
                    |m: &RuntimeGroupStatusResp| { &m.runtimeGroupsStstus },
                    |m: &mut RuntimeGroupStatusResp| { &mut m.runtimeGroupsStstus },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RuntimeGroupStatusResp>(
                    "RuntimeGroupStatusResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RuntimeGroupStatusResp {
        static mut instance: ::protobuf::lazy::Lazy<RuntimeGroupStatusResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RuntimeGroupStatusResp,
        };
        unsafe {
            instance.get(RuntimeGroupStatusResp::new)
        }
    }
}

impl ::protobuf::Clear for RuntimeGroupStatusResp {
    fn clear(&mut self) {
        self.clear_response();
        self.clear_runtimeGroupsStstus();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RuntimeGroupStatusResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeGroupStatusResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RuntimeGroupStatusResp_Status {
    STARTING = 0,
    READY = 1,
    RUNNING = 2,
    RESTORE = 3,
}

impl ::protobuf::ProtobufEnum for RuntimeGroupStatusResp_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RuntimeGroupStatusResp_Status> {
        match value {
            0 => ::std::option::Option::Some(RuntimeGroupStatusResp_Status::STARTING),
            1 => ::std::option::Option::Some(RuntimeGroupStatusResp_Status::READY),
            2 => ::std::option::Option::Some(RuntimeGroupStatusResp_Status::RUNNING),
            3 => ::std::option::Option::Some(RuntimeGroupStatusResp_Status::RESTORE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RuntimeGroupStatusResp_Status] = &[
            RuntimeGroupStatusResp_Status::STARTING,
            RuntimeGroupStatusResp_Status::READY,
            RuntimeGroupStatusResp_Status::RUNNING,
            RuntimeGroupStatusResp_Status::RESTORE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RuntimeGroupStatusResp_Status", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RuntimeGroupStatusResp_Status {
}

impl ::std::default::Default for RuntimeGroupStatusResp_Status {
    fn default() -> Self {
        RuntimeGroupStatusResp_Status::STARTING
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeGroupStatusResp_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DataPathStatusResponse {
    // message fields
    pub response: ::protobuf::SingularPtrField<super::common::Response>,
    pub isInUse: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DataPathStatusResponse {
    pub fn new() -> DataPathStatusResponse {
        ::std::default::Default::default()
    }

    // .Response response = 1;

    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: super::common::Response) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut super::common::Response {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> super::common::Response {
        self.response.take().unwrap_or_else(|| super::common::Response::new())
    }

    pub fn get_response(&self) -> &super::common::Response {
        self.response.as_ref().unwrap_or_else(|| super::common::Response::default_instance())
    }

    // bool isInUse = 2;

    pub fn clear_isInUse(&mut self) {
        self.isInUse = false;
    }

    // Param is passed by value, moved
    pub fn set_isInUse(&mut self, v: bool) {
        self.isInUse = v;
    }

    pub fn get_isInUse(&self) -> bool {
        self.isInUse
    }
}

impl ::protobuf::Message for DataPathStatusResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isInUse = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.isInUse != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.isInUse != false {
            os.write_bool(2, self.isInUse)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DataPathStatusResponse {
        DataPathStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                    "response",
                    |m: &DataPathStatusResponse| { &m.response },
                    |m: &mut DataPathStatusResponse| { &mut m.response },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isInUse",
                    |m: &DataPathStatusResponse| { &m.isInUse },
                    |m: &mut DataPathStatusResponse| { &mut m.isInUse },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DataPathStatusResponse>(
                    "DataPathStatusResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DataPathStatusResponse {
        static mut instance: ::protobuf::lazy::Lazy<DataPathStatusResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DataPathStatusResponse,
        };
        unsafe {
            instance.get(DataPathStatusResponse::new)
        }
    }
}

impl ::protobuf::Clear for DataPathStatusResponse {
    fn clear(&mut self) {
        self.clear_response();
        self.clear_isInUse();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DataPathStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataPathStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetExecutorAliveIdRequest {
    // message fields
    pub serverId: u32,
    pub ip: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetExecutorAliveIdRequest {
    pub fn new() -> GetExecutorAliveIdRequest {
        ::std::default::Default::default()
    }

    // uint32 serverId = 1;

    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: u32) {
        self.serverId = v;
    }

    pub fn get_serverId(&self) -> u32 {
        self.serverId
    }

    // string ip = 2;

    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    pub fn get_ip(&self) -> &str {
        &self.ip
    }
}

impl ::protobuf::Message for GetExecutorAliveIdRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.serverId = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ip);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.serverId != 0 {
            os.write_uint32(1, self.serverId)?;
        }
        if !self.ip.is_empty() {
            os.write_string(2, &self.ip)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetExecutorAliveIdRequest {
        GetExecutorAliveIdRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "serverId",
                    |m: &GetExecutorAliveIdRequest| { &m.serverId },
                    |m: &mut GetExecutorAliveIdRequest| { &mut m.serverId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip",
                    |m: &GetExecutorAliveIdRequest| { &m.ip },
                    |m: &mut GetExecutorAliveIdRequest| { &mut m.ip },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetExecutorAliveIdRequest>(
                    "GetExecutorAliveIdRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetExecutorAliveIdRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetExecutorAliveIdRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetExecutorAliveIdRequest,
        };
        unsafe {
            instance.get(GetExecutorAliveIdRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetExecutorAliveIdRequest {
    fn clear(&mut self) {
        self.clear_serverId();
        self.clear_ip();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetExecutorAliveIdRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetExecutorAliveIdRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetExecutorAliveIdResponse {
    // message fields
    pub response: ::protobuf::SingularPtrField<super::common::Response>,
    pub aliveId: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetExecutorAliveIdResponse {
    pub fn new() -> GetExecutorAliveIdResponse {
        ::std::default::Default::default()
    }

    // .Response response = 1;

    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: super::common::Response) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut super::common::Response {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> super::common::Response {
        self.response.take().unwrap_or_else(|| super::common::Response::new())
    }

    pub fn get_response(&self) -> &super::common::Response {
        self.response.as_ref().unwrap_or_else(|| super::common::Response::default_instance())
    }

    // uint64 aliveId = 2;

    pub fn clear_aliveId(&mut self) {
        self.aliveId = 0;
    }

    // Param is passed by value, moved
    pub fn set_aliveId(&mut self, v: u64) {
        self.aliveId = v;
    }

    pub fn get_aliveId(&self) -> u64 {
        self.aliveId
    }
}

impl ::protobuf::Message for GetExecutorAliveIdResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.aliveId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.aliveId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.aliveId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.aliveId != 0 {
            os.write_uint64(2, self.aliveId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetExecutorAliveIdResponse {
        GetExecutorAliveIdResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                    "response",
                    |m: &GetExecutorAliveIdResponse| { &m.response },
                    |m: &mut GetExecutorAliveIdResponse| { &mut m.response },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "aliveId",
                    |m: &GetExecutorAliveIdResponse| { &m.aliveId },
                    |m: &mut GetExecutorAliveIdResponse| { &mut m.aliveId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetExecutorAliveIdResponse>(
                    "GetExecutorAliveIdResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetExecutorAliveIdResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetExecutorAliveIdResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetExecutorAliveIdResponse,
        };
        unsafe {
            instance.get(GetExecutorAliveIdResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetExecutorAliveIdResponse {
    fn clear(&mut self) {
        self.clear_response();
        self.clear_aliveId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetExecutorAliveIdResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetExecutorAliveIdResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPartitionAssignmentRequest {
    // message fields
    pub serverId: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetPartitionAssignmentRequest {
    pub fn new() -> GetPartitionAssignmentRequest {
        ::std::default::Default::default()
    }

    // uint32 serverId = 1;

    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: u32) {
        self.serverId = v;
    }

    pub fn get_serverId(&self) -> u32 {
        self.serverId
    }
}

impl ::protobuf::Message for GetPartitionAssignmentRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.serverId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.serverId != 0 {
            os.write_uint32(1, self.serverId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPartitionAssignmentRequest {
        GetPartitionAssignmentRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "serverId",
                    |m: &GetPartitionAssignmentRequest| { &m.serverId },
                    |m: &mut GetPartitionAssignmentRequest| { &mut m.serverId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetPartitionAssignmentRequest>(
                    "GetPartitionAssignmentRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetPartitionAssignmentRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetPartitionAssignmentRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetPartitionAssignmentRequest,
        };
        unsafe {
            instance.get(GetPartitionAssignmentRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetPartitionAssignmentRequest {
    fn clear(&mut self) {
        self.clear_serverId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPartitionAssignmentRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPartitionAssignmentRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetPartitionAssignmentResponse {
    // message fields
    pub partitionId: ::std::vec::Vec<u32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl GetPartitionAssignmentResponse {
    pub fn new() -> GetPartitionAssignmentResponse {
        ::std::default::Default::default()
    }

    // repeated uint32 partitionId = 1;

    pub fn clear_partitionId(&mut self) {
        self.partitionId.clear();
    }

    // Param is passed by value, moved
    pub fn set_partitionId(&mut self, v: ::std::vec::Vec<u32>) {
        self.partitionId = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partitionId(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.partitionId
    }

    // Take field
    pub fn take_partitionId(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.partitionId, ::std::vec::Vec::new())
    }

    pub fn get_partitionId(&self) -> &[u32] {
        &self.partitionId
    }
}

impl ::protobuf::Message for GetPartitionAssignmentResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.partitionId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.partitionId {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.partitionId {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetPartitionAssignmentResponse {
        GetPartitionAssignmentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "partitionId",
                    |m: &GetPartitionAssignmentResponse| { &m.partitionId },
                    |m: &mut GetPartitionAssignmentResponse| { &mut m.partitionId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetPartitionAssignmentResponse>(
                    "GetPartitionAssignmentResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetPartitionAssignmentResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetPartitionAssignmentResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetPartitionAssignmentResponse,
        };
        unsafe {
            instance.get(GetPartitionAssignmentResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetPartitionAssignmentResponse {
    fn clear(&mut self) {
        self.clear_partitionId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetPartitionAssignmentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetPartitionAssignmentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientIdResponse {
    // message fields
    pub clientId: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClientIdResponse {
    pub fn new() -> ClientIdResponse {
        ::std::default::Default::default()
    }

    // int64 clientId = 1;

    pub fn clear_clientId(&mut self) {
        self.clientId = 0;
    }

    // Param is passed by value, moved
    pub fn set_clientId(&mut self, v: i64) {
        self.clientId = v;
    }

    pub fn get_clientId(&self) -> i64 {
        self.clientId
    }
}

impl ::protobuf::Message for ClientIdResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.clientId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.clientId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.clientId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.clientId != 0 {
            os.write_int64(1, self.clientId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientIdResponse {
        ClientIdResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "clientId",
                    |m: &ClientIdResponse| { &m.clientId },
                    |m: &mut ClientIdResponse| { &mut m.clientId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClientIdResponse>(
                    "ClientIdResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClientIdResponse {
        static mut instance: ::protobuf::lazy::Lazy<ClientIdResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClientIdResponse,
        };
        unsafe {
            instance.get(ClientIdResponse::new)
        }
    }
}

impl ::protobuf::Clear for ClientIdResponse {
    fn clear(&mut self) {
        self.clear_clientId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientIdResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientIdResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ndata.proto\x1a\x10sdk/common.proto\x1a\x08hb.proto\x1a\rcluster.prot\
    o\"\xc1\x03\n\x11InstanceInfoProto\x12B\n\nassignment\x18\x01\x20\x03(\
    \x0b2\".InstanceInfoProto.AssignmentEntryR\nassignment\x12E\n\x0bworkerI\
    nfos\x18\x02\x20\x03(\x0b2#.InstanceInfoProto.WorkerInfosEntryR\x0bworke\
    rInfos\x12&\n\x0eofflineVersion\x18\x04\x20\x01(\x03R\x0eofflineVersion\
    \x121\n\x06status\x18\x07\x20\x01(\x0e2\x19.InstanceInfoProto.StatusR\
    \x06status\x1aO\n\x0fAssignmentEntry\x12\x10\n\x03key\x18\x01\x20\x01(\
    \x05R\x03key\x12&\n\x05value\x18\x02\x20\x01(\x0b2\x10.PartitionProtosR\
    \x05value:\x028\x01\x1aQ\n\x10WorkerInfosEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\x05R\x03key\x12'\n\x05value\x18\x02\x20\x01(\x0b2\x11.WorkerIn\
    foProtosR\x05value:\x028\x01\"\"\n\x06Status\x12\n\n\x06NORMAL\x10\0\x12\
    \x0c\n\x08ABNORMAL\x10\x01\"s\n\x10InstanceInfoResp\x12\x1d\n\x04resp\
    \x18\x01\x20\x01(\x0b2\t.ResponseR\x04resp\x12@\n\x11instanceInfoProto\
    \x18\x02\x20\x01(\x0b2\x12.InstanceInfoProtoR\x11instanceInfoProto\"\xc8\
    \x02\n\x16RuntimeGroupStatusResp\x12%\n\x08response\x18\x01\x20\x01(\x0b\
    2\t.ResponseR\x08response\x12b\n\x13runtimeGroupsStstus\x18\x02\x20\x03(\
    \x0b20.RuntimeGroupStatusResp.RuntimeGroupsStstusEntryR\x13runtimeGroups\
    Ststus\x1af\n\x18RuntimeGroupsStstusEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\x05R\x03key\x124\n\x05value\x18\x02\x20\x01(\x0e2\x1e.RuntimeGroup\
    StatusResp.StatusR\x05value:\x028\x01\";\n\x06Status\x12\x0c\n\x08STARTI\
    NG\x10\0\x12\t\n\x05READY\x10\x01\x12\x0b\n\x07RUNNING\x10\x02\x12\x0b\n\
    \x07RESTORE\x10\x03\"Y\n\x16DataPathStatusResponse\x12%\n\x08response\
    \x18\x01\x20\x01(\x0b2\t.ResponseR\x08response\x12\x18\n\x07isInUse\x18\
    \x02\x20\x01(\x08R\x07isInUse\"G\n\x19GetExecutorAliveIdRequest\x12\x1a\
    \n\x08serverId\x18\x01\x20\x01(\rR\x08serverId\x12\x0e\n\x02ip\x18\x02\
    \x20\x01(\tR\x02ip\"]\n\x1aGetExecutorAliveIdResponse\x12%\n\x08response\
    \x18\x01\x20\x01(\x0b2\t.ResponseR\x08response\x12\x18\n\x07aliveId\x18\
    \x02\x20\x01(\x04R\x07aliveId\";\n\x1dGetPartitionAssignmentRequest\x12\
    \x1a\n\x08serverId\x18\x01\x20\x01(\rR\x08serverId\"B\n\x1eGetPartitionA\
    ssignmentResponse\x12\x20\n\x0bpartitionId\x18\x01\x20\x03(\rR\x0bpartit\
    ionId\".\n\x10ClientIdResponse\x12\x1a\n\x08clientId\x18\x01\x20\x01(\
    \x03R\x08clientId2\xde\x05\n\rServerDataApi\x12.\n\x0fgetInstanceInfo\
    \x12\x08.Request\x1a\x11.InstanceInfoResp\x12(\n\theartbeat\x12\x0c.Serv\
    erHBReq\x1a\r.ServerHBResp\x120\n\x10updateRuntimeEnv\x12\x0b.RuntimeEnv\
    \x1a\x0f.RuntimeEnvList\x12!\n\x0fresetRuntimeEnv\x12\x06.Empty\x1a\x06.\
    Empty\x12>\n\x0fsimpleHeartbeat\x12\x12.SimpleServerHBReq\x1a\x17.Simple\
    ServerHBResponse\x128\n\x15getRuntimeGroupStatus\x12\x06.Empty\x1a\x17.R\
    untimeGroupStatusResp\x12A\n\x0fisDataPathInUse\x12\x15.ServerIdAliveIdP\
    roto\x1a\x17.DataPathStatusResponse\x12E\n!getWorkerInfoAndRoutingServer\
    List\x12\x08.Request\x1a\x16.RoutingServerInfoResp\x128\n\x11getRealTime\
    Metric\x12\x12.MetricInfoRequest\x1a\x0f.MetricInfoResp\x126\n\x15getAll\
    RealTimeMetrics\x12\x08.Request\x1a\x13.AllMetricsInfoResp\x12M\n\x12get\
    ExecutorAliveId\x12\x1a.GetExecutorAliveIdRequest\x1a\x1b.GetExecutorAli\
    veIdResponse\x12Y\n\x16getPartitionAssignment\x12\x1e.GetPartitionAssign\
    mentRequest\x1a\x1f.GetPartitionAssignmentResponseB!\n\x1acom.alibaba.ma\
    xgraph.protoP\x01\xa0\x01\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
