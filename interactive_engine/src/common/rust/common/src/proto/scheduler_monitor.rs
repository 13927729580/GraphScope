//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct SchedulerEvent {
    // message fields
    pub level: EventLevel,
    pub field_type: EventType,
    pub msg: ::std::string::String,
    pub date: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SchedulerEvent {
    pub fn new() -> SchedulerEvent {
        ::std::default::Default::default()
    }

    // .EventLevel level = 1;

    pub fn clear_level(&mut self) {
        self.level = EventLevel::SERIOUS;
    }

    // Param is passed by value, moved
    pub fn set_level(&mut self, v: EventLevel) {
        self.level = v;
    }

    pub fn get_level(&self) -> EventLevel {
        self.level
    }

    // .EventType type = 2;

    pub fn clear_field_type(&mut self) {
        self.field_type = EventType::RESOURCE_SCHEDULER;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EventType) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> EventType {
        self.field_type
    }

    // string msg = 3;

    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::string::String) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::string::String {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg, ::std::string::String::new())
    }

    pub fn get_msg(&self) -> &str {
        &self.msg
    }

    // string date = 4;

    pub fn clear_date(&mut self) {
        self.date.clear();
    }

    // Param is passed by value, moved
    pub fn set_date(&mut self, v: ::std::string::String) {
        self.date = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_date(&mut self) -> &mut ::std::string::String {
        &mut self.date
    }

    // Take field
    pub fn take_date(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.date, ::std::string::String::new())
    }

    pub fn get_date(&self) -> &str {
        &self.date
    }
}

impl ::protobuf::Message for SchedulerEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.level, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.date)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.level != EventLevel::SERIOUS {
            my_size += ::protobuf::rt::enum_size(1, self.level);
        }
        if self.field_type != EventType::RESOURCE_SCHEDULER {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.msg);
        }
        if !self.date.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.date);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.level != EventLevel::SERIOUS {
            os.write_enum(1, self.level.value())?;
        }
        if self.field_type != EventType::RESOURCE_SCHEDULER {
            os.write_enum(2, self.field_type.value())?;
        }
        if !self.msg.is_empty() {
            os.write_string(3, &self.msg)?;
        }
        if !self.date.is_empty() {
            os.write_string(4, &self.date)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchedulerEvent {
        SchedulerEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventLevel>>(
                    "level",
                    |m: &SchedulerEvent| { &m.level },
                    |m: &mut SchedulerEvent| { &mut m.level },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                    "type",
                    |m: &SchedulerEvent| { &m.field_type },
                    |m: &mut SchedulerEvent| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "msg",
                    |m: &SchedulerEvent| { &m.msg },
                    |m: &mut SchedulerEvent| { &mut m.msg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "date",
                    |m: &SchedulerEvent| { &m.date },
                    |m: &mut SchedulerEvent| { &mut m.date },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SchedulerEvent>(
                    "SchedulerEvent",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SchedulerEvent {
        static mut instance: ::protobuf::lazy::Lazy<SchedulerEvent> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SchedulerEvent,
        };
        unsafe {
            instance.get(SchedulerEvent::new)
        }
    }
}

impl ::protobuf::Clear for SchedulerEvent {
    fn clear(&mut self) {
        self.clear_level();
        self.clear_field_type();
        self.clear_msg();
        self.clear_date();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchedulerEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchedulerEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RestartWorkerReq {
    // message fields
    pub toRestartWorkerIdList: ::std::vec::Vec<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RestartWorkerReq {
    pub fn new() -> RestartWorkerReq {
        ::std::default::Default::default()
    }

    // repeated int32 toRestartWorkerIdList = 1;

    pub fn clear_toRestartWorkerIdList(&mut self) {
        self.toRestartWorkerIdList.clear();
    }

    // Param is passed by value, moved
    pub fn set_toRestartWorkerIdList(&mut self, v: ::std::vec::Vec<i32>) {
        self.toRestartWorkerIdList = v;
    }

    // Mutable pointer to the field.
    pub fn mut_toRestartWorkerIdList(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.toRestartWorkerIdList
    }

    // Take field
    pub fn take_toRestartWorkerIdList(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.toRestartWorkerIdList, ::std::vec::Vec::new())
    }

    pub fn get_toRestartWorkerIdList(&self) -> &[i32] {
        &self.toRestartWorkerIdList
    }
}

impl ::protobuf::Message for RestartWorkerReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.toRestartWorkerIdList)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.toRestartWorkerIdList {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.toRestartWorkerIdList {
            os.write_int32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RestartWorkerReq {
        RestartWorkerReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "toRestartWorkerIdList",
                    |m: &RestartWorkerReq| { &m.toRestartWorkerIdList },
                    |m: &mut RestartWorkerReq| { &mut m.toRestartWorkerIdList },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RestartWorkerReq>(
                    "RestartWorkerReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RestartWorkerReq {
        static mut instance: ::protobuf::lazy::Lazy<RestartWorkerReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RestartWorkerReq,
        };
        unsafe {
            instance.get(RestartWorkerReq::new)
        }
    }
}

impl ::protobuf::Clear for RestartWorkerReq {
    fn clear(&mut self) {
        self.clear_toRestartWorkerIdList();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RestartWorkerReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RestartWorkerReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchedulerEventReq {
    // message fields
    pub latestEventNum: i32,
    pub eventLevel: ::std::string::String,
    pub eventType: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SchedulerEventReq {
    pub fn new() -> SchedulerEventReq {
        ::std::default::Default::default()
    }

    // int32 latestEventNum = 1;

    pub fn clear_latestEventNum(&mut self) {
        self.latestEventNum = 0;
    }

    // Param is passed by value, moved
    pub fn set_latestEventNum(&mut self, v: i32) {
        self.latestEventNum = v;
    }

    pub fn get_latestEventNum(&self) -> i32 {
        self.latestEventNum
    }

    // string eventLevel = 2;

    pub fn clear_eventLevel(&mut self) {
        self.eventLevel.clear();
    }

    // Param is passed by value, moved
    pub fn set_eventLevel(&mut self, v: ::std::string::String) {
        self.eventLevel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventLevel(&mut self) -> &mut ::std::string::String {
        &mut self.eventLevel
    }

    // Take field
    pub fn take_eventLevel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.eventLevel, ::std::string::String::new())
    }

    pub fn get_eventLevel(&self) -> &str {
        &self.eventLevel
    }

    // string eventType = 3;

    pub fn clear_eventType(&mut self) {
        self.eventType.clear();
    }

    // Param is passed by value, moved
    pub fn set_eventType(&mut self, v: ::std::string::String) {
        self.eventType = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eventType(&mut self) -> &mut ::std::string::String {
        &mut self.eventType
    }

    // Take field
    pub fn take_eventType(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.eventType, ::std::string::String::new())
    }

    pub fn get_eventType(&self) -> &str {
        &self.eventType
    }
}

impl ::protobuf::Message for SchedulerEventReq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.latestEventNum = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.eventLevel)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.eventType)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latestEventNum != 0 {
            my_size += ::protobuf::rt::value_size(1, self.latestEventNum, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.eventLevel.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.eventLevel);
        }
        if !self.eventType.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.eventType);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.latestEventNum != 0 {
            os.write_int32(1, self.latestEventNum)?;
        }
        if !self.eventLevel.is_empty() {
            os.write_string(2, &self.eventLevel)?;
        }
        if !self.eventType.is_empty() {
            os.write_string(3, &self.eventType)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchedulerEventReq {
        SchedulerEventReq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "latestEventNum",
                    |m: &SchedulerEventReq| { &m.latestEventNum },
                    |m: &mut SchedulerEventReq| { &mut m.latestEventNum },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "eventLevel",
                    |m: &SchedulerEventReq| { &m.eventLevel },
                    |m: &mut SchedulerEventReq| { &mut m.eventLevel },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "eventType",
                    |m: &SchedulerEventReq| { &m.eventType },
                    |m: &mut SchedulerEventReq| { &mut m.eventType },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SchedulerEventReq>(
                    "SchedulerEventReq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SchedulerEventReq {
        static mut instance: ::protobuf::lazy::Lazy<SchedulerEventReq> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SchedulerEventReq,
        };
        unsafe {
            instance.get(SchedulerEventReq::new)
        }
    }
}

impl ::protobuf::Clear for SchedulerEventReq {
    fn clear(&mut self) {
        self.clear_latestEventNum();
        self.clear_eventLevel();
        self.clear_eventType();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchedulerEventReq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchedulerEventReq {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SchedulerEventResp {
    // message fields
    pub eventList: ::protobuf::RepeatedField<SchedulerEvent>,
    pub resp: ::protobuf::SingularPtrField<super::common::Response>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl SchedulerEventResp {
    pub fn new() -> SchedulerEventResp {
        ::std::default::Default::default()
    }

    // repeated .SchedulerEvent eventList = 1;

    pub fn clear_eventList(&mut self) {
        self.eventList.clear();
    }

    // Param is passed by value, moved
    pub fn set_eventList(&mut self, v: ::protobuf::RepeatedField<SchedulerEvent>) {
        self.eventList = v;
    }

    // Mutable pointer to the field.
    pub fn mut_eventList(&mut self) -> &mut ::protobuf::RepeatedField<SchedulerEvent> {
        &mut self.eventList
    }

    // Take field
    pub fn take_eventList(&mut self) -> ::protobuf::RepeatedField<SchedulerEvent> {
        ::std::mem::replace(&mut self.eventList, ::protobuf::RepeatedField::new())
    }

    pub fn get_eventList(&self) -> &[SchedulerEvent] {
        &self.eventList
    }

    // .Response resp = 2;

    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: super::common::Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut super::common::Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> super::common::Response {
        self.resp.take().unwrap_or_else(|| super::common::Response::new())
    }

    pub fn get_resp(&self) -> &super::common::Response {
        self.resp.as_ref().unwrap_or_else(|| super::common::Response::default_instance())
    }
}

impl ::protobuf::Message for SchedulerEventResp {
    fn is_initialized(&self) -> bool {
        for v in &self.eventList {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.eventList)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.eventList {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.eventList {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SchedulerEventResp {
        SchedulerEventResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SchedulerEvent>>(
                    "eventList",
                    |m: &SchedulerEventResp| { &m.eventList },
                    |m: &mut SchedulerEventResp| { &mut m.eventList },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Response>>(
                    "resp",
                    |m: &SchedulerEventResp| { &m.resp },
                    |m: &mut SchedulerEventResp| { &mut m.resp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SchedulerEventResp>(
                    "SchedulerEventResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SchedulerEventResp {
        static mut instance: ::protobuf::lazy::Lazy<SchedulerEventResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SchedulerEventResp,
        };
        unsafe {
            instance.get(SchedulerEventResp::new)
        }
    }
}

impl ::protobuf::Clear for SchedulerEventResp {
    fn clear(&mut self) {
        self.clear_eventList();
        self.clear_resp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SchedulerEventResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SchedulerEventResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventLevel {
    SERIOUS = 0,
    WARNING = 1,
    NORMAL = 2,
}

impl ::protobuf::ProtobufEnum for EventLevel {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventLevel> {
        match value {
            0 => ::std::option::Option::Some(EventLevel::SERIOUS),
            1 => ::std::option::Option::Some(EventLevel::WARNING),
            2 => ::std::option::Option::Some(EventLevel::NORMAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventLevel] = &[
            EventLevel::SERIOUS,
            EventLevel::WARNING,
            EventLevel::NORMAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EventLevel", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EventLevel {
}

impl ::std::default::Default for EventLevel {
    fn default() -> Self {
        EventLevel::SERIOUS
    }
}

impl ::protobuf::reflect::ProtobufValue for EventLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    RESOURCE_SCHEDULER = 0,
    WORKER_OPERATION = 1,
    EXCEPTION_INFO = 2,
    NORMAL_INFO = 3,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::RESOURCE_SCHEDULER),
            1 => ::std::option::Option::Some(EventType::WORKER_OPERATION),
            2 => ::std::option::Option::Some(EventType::EXCEPTION_INFO),
            3 => ::std::option::Option::Some(EventType::NORMAL_INFO),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::RESOURCE_SCHEDULER,
            EventType::WORKER_OPERATION,
            EventType::EXCEPTION_INFO,
            EventType::NORMAL_INFO,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("EventType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::RESOURCE_SCHEDULER
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17scheduler_monitor.proto\x1a\x10sdk/common.proto\"y\n\x0eSchedulerE\
    vent\x12!\n\x05level\x18\x01\x20\x01(\x0e2\x0b.EventLevelR\x05level\x12\
    \x1e\n\x04type\x18\x02\x20\x01(\x0e2\n.EventTypeR\x04type\x12\x10\n\x03m\
    sg\x18\x03\x20\x01(\tR\x03msg\x12\x12\n\x04date\x18\x04\x20\x01(\tR\x04d\
    ate\"H\n\x10RestartWorkerReq\x124\n\x15toRestartWorkerIdList\x18\x01\x20\
    \x03(\x05R\x15toRestartWorkerIdList\"y\n\x11SchedulerEventReq\x12&\n\x0e\
    latestEventNum\x18\x01\x20\x01(\x05R\x0elatestEventNum\x12\x1e\n\neventL\
    evel\x18\x02\x20\x01(\tR\neventLevel\x12\x1c\n\teventType\x18\x03\x20\
    \x01(\tR\teventType\"b\n\x12SchedulerEventResp\x12-\n\teventList\x18\x01\
    \x20\x03(\x0b2\x0f.SchedulerEventR\teventList\x12\x1d\n\x04resp\x18\x02\
    \x20\x01(\x0b2\t.ResponseR\x04resp*2\n\nEventLevel\x12\x0b\n\x07SERIOUS\
    \x10\0\x12\x0b\n\x07WARNING\x10\x01\x12\n\n\x06NORMAL\x10\x02*^\n\tEvent\
    Type\x12\x16\n\x12RESOURCE_SCHEDULER\x10\0\x12\x14\n\x10WORKER_OPERATION\
    \x10\x01\x12\x12\n\x0eEXCEPTION_INFO\x10\x02\x12\x0f\n\x0bNORMAL_INFO\
    \x10\x032\x83\x01\n\x0cSchedulerApi\x125\n\x15restartWorkerManually\x12\
    \x11.RestartWorkerReq\x1a\t.Response\x12<\n\x11getSchedulerEvent\x12\x12\
    .SchedulerEventReq\x1a\x13.SchedulerEventRespB!\n\x1acom.alibaba.maxgrap\
    h.protoP\x01\xa0\x01\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
