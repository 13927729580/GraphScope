//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct LambdaBase {
    // message fields
    pub query_id: ::std::string::String,
    pub script: ::std::string::String,
    pub bytecode: ::std::vec::Vec<u8>,
    pub schema: ::protobuf::SingularPtrField<super::schema::SchemaProto>,
    pub timeout_ms: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LambdaBase {
    pub fn new() -> LambdaBase {
        ::std::default::Default::default()
    }

    // string query_id = 1;

    pub fn clear_query_id(&mut self) {
        self.query_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_id(&mut self, v: ::std::string::String) {
        self.query_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_id(&mut self) -> &mut ::std::string::String {
        &mut self.query_id
    }

    // Take field
    pub fn take_query_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query_id, ::std::string::String::new())
    }

    pub fn get_query_id(&self) -> &str {
        &self.query_id
    }

    // string script = 2;

    pub fn clear_script(&mut self) {
        self.script.clear();
    }

    // Param is passed by value, moved
    pub fn set_script(&mut self, v: ::std::string::String) {
        self.script = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script(&mut self) -> &mut ::std::string::String {
        &mut self.script
    }

    // Take field
    pub fn take_script(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.script, ::std::string::String::new())
    }

    pub fn get_script(&self) -> &str {
        &self.script
    }

    // bytes bytecode = 3;

    pub fn clear_bytecode(&mut self) {
        self.bytecode.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytecode(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytecode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytecode(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytecode
    }

    // Take field
    pub fn take_bytecode(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytecode, ::std::vec::Vec::new())
    }

    pub fn get_bytecode(&self) -> &[u8] {
        &self.bytecode
    }

    // .SchemaProto schema = 4;

    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: super::schema::SchemaProto) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut super::schema::SchemaProto {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> super::schema::SchemaProto {
        self.schema.take().unwrap_or_else(|| super::schema::SchemaProto::new())
    }

    pub fn get_schema(&self) -> &super::schema::SchemaProto {
        self.schema.as_ref().unwrap_or_else(|| super::schema::SchemaProto::default_instance())
    }

    // uint64 timeout_ms = 5;

    pub fn clear_timeout_ms(&mut self) {
        self.timeout_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_ms(&mut self, v: u64) {
        self.timeout_ms = v;
    }

    pub fn get_timeout_ms(&self) -> u64 {
        self.timeout_ms
    }
}

impl ::protobuf::Message for LambdaBase {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.script)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytecode)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_id);
        }
        if !self.script.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.script);
        }
        if !self.bytecode.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.bytecode);
        }
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.timeout_ms != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timeout_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.query_id.is_empty() {
            os.write_string(1, &self.query_id)?;
        }
        if !self.script.is_empty() {
            os.write_string(2, &self.script)?;
        }
        if !self.bytecode.is_empty() {
            os.write_bytes(3, &self.bytecode)?;
        }
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.timeout_ms != 0 {
            os.write_uint64(5, self.timeout_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LambdaBase {
        LambdaBase::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query_id",
                    |m: &LambdaBase| { &m.query_id },
                    |m: &mut LambdaBase| { &mut m.query_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "script",
                    |m: &LambdaBase| { &m.script },
                    |m: &mut LambdaBase| { &mut m.script },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bytecode",
                    |m: &LambdaBase| { &m.bytecode },
                    |m: &mut LambdaBase| { &mut m.bytecode },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::schema::SchemaProto>>(
                    "schema",
                    |m: &LambdaBase| { &m.schema },
                    |m: &mut LambdaBase| { &mut m.schema },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timeout_ms",
                    |m: &LambdaBase| { &m.timeout_ms },
                    |m: &mut LambdaBase| { &mut m.timeout_ms },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LambdaBase>(
                    "LambdaBase",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LambdaBase {
        static mut instance: ::protobuf::lazy::Lazy<LambdaBase> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LambdaBase,
        };
        unsafe {
            instance.get(LambdaBase::new)
        }
    }
}

impl ::protobuf::Clear for LambdaBase {
    fn clear(&mut self) {
        self.clear_query_id();
        self.clear_script();
        self.clear_bytecode();
        self.clear_schema();
        self.clear_timeout_ms();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LambdaBase {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LambdaBase {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LambdaData {
    // message fields
    pub query_id: ::std::string::String,
    pub lambda_index: ::std::string::String,
    pub message_list: ::protobuf::SingularPtrField<super::message::ListProto>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LambdaData {
    pub fn new() -> LambdaData {
        ::std::default::Default::default()
    }

    // string query_id = 1;

    pub fn clear_query_id(&mut self) {
        self.query_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_id(&mut self, v: ::std::string::String) {
        self.query_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_id(&mut self) -> &mut ::std::string::String {
        &mut self.query_id
    }

    // Take field
    pub fn take_query_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query_id, ::std::string::String::new())
    }

    pub fn get_query_id(&self) -> &str {
        &self.query_id
    }

    // string lambda_index = 2;

    pub fn clear_lambda_index(&mut self) {
        self.lambda_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_lambda_index(&mut self, v: ::std::string::String) {
        self.lambda_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lambda_index(&mut self) -> &mut ::std::string::String {
        &mut self.lambda_index
    }

    // Take field
    pub fn take_lambda_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lambda_index, ::std::string::String::new())
    }

    pub fn get_lambda_index(&self) -> &str {
        &self.lambda_index
    }

    // .maxgraph.ListProto message_list = 3;

    pub fn clear_message_list(&mut self) {
        self.message_list.clear();
    }

    pub fn has_message_list(&self) -> bool {
        self.message_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_list(&mut self, v: super::message::ListProto) {
        self.message_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_list(&mut self) -> &mut super::message::ListProto {
        if self.message_list.is_none() {
            self.message_list.set_default();
        }
        self.message_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_message_list(&mut self) -> super::message::ListProto {
        self.message_list.take().unwrap_or_else(|| super::message::ListProto::new())
    }

    pub fn get_message_list(&self) -> &super::message::ListProto {
        self.message_list.as_ref().unwrap_or_else(|| super::message::ListProto::default_instance())
    }
}

impl ::protobuf::Message for LambdaData {
    fn is_initialized(&self) -> bool {
        for v in &self.message_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lambda_index)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_id);
        }
        if !self.lambda_index.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.lambda_index);
        }
        if let Some(ref v) = self.message_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.query_id.is_empty() {
            os.write_string(1, &self.query_id)?;
        }
        if !self.lambda_index.is_empty() {
            os.write_string(2, &self.lambda_index)?;
        }
        if let Some(ref v) = self.message_list.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LambdaData {
        LambdaData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query_id",
                    |m: &LambdaData| { &m.query_id },
                    |m: &mut LambdaData| { &mut m.query_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lambda_index",
                    |m: &LambdaData| { &m.lambda_index },
                    |m: &mut LambdaData| { &mut m.lambda_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::ListProto>>(
                    "message_list",
                    |m: &LambdaData| { &m.message_list },
                    |m: &mut LambdaData| { &mut m.message_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LambdaData>(
                    "LambdaData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LambdaData {
        static mut instance: ::protobuf::lazy::Lazy<LambdaData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LambdaData,
        };
        unsafe {
            instance.get(LambdaData::new)
        }
    }
}

impl ::protobuf::Clear for LambdaData {
    fn clear(&mut self) {
        self.clear_query_id();
        self.clear_lambda_index();
        self.clear_message_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LambdaData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LambdaData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LambdaResult {
    // message fields
    pub query_id: ::std::string::String,
    pub lambda_index: ::std::string::String,
    pub result_id_list: ::protobuf::SingularPtrField<super::message::ListLong>,
    pub message_list: ::protobuf::SingularPtrField<super::message::ListProto>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LambdaResult {
    pub fn new() -> LambdaResult {
        ::std::default::Default::default()
    }

    // string query_id = 1;

    pub fn clear_query_id(&mut self) {
        self.query_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_id(&mut self, v: ::std::string::String) {
        self.query_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_id(&mut self) -> &mut ::std::string::String {
        &mut self.query_id
    }

    // Take field
    pub fn take_query_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query_id, ::std::string::String::new())
    }

    pub fn get_query_id(&self) -> &str {
        &self.query_id
    }

    // string lambda_index = 2;

    pub fn clear_lambda_index(&mut self) {
        self.lambda_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_lambda_index(&mut self, v: ::std::string::String) {
        self.lambda_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lambda_index(&mut self) -> &mut ::std::string::String {
        &mut self.lambda_index
    }

    // Take field
    pub fn take_lambda_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.lambda_index, ::std::string::String::new())
    }

    pub fn get_lambda_index(&self) -> &str {
        &self.lambda_index
    }

    // .maxgraph.ListLong result_id_list = 3;

    pub fn clear_result_id_list(&mut self) {
        self.result_id_list.clear();
    }

    pub fn has_result_id_list(&self) -> bool {
        self.result_id_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result_id_list(&mut self, v: super::message::ListLong) {
        self.result_id_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_id_list(&mut self) -> &mut super::message::ListLong {
        if self.result_id_list.is_none() {
            self.result_id_list.set_default();
        }
        self.result_id_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_result_id_list(&mut self) -> super::message::ListLong {
        self.result_id_list.take().unwrap_or_else(|| super::message::ListLong::new())
    }

    pub fn get_result_id_list(&self) -> &super::message::ListLong {
        self.result_id_list.as_ref().unwrap_or_else(|| super::message::ListLong::default_instance())
    }

    // .maxgraph.ListProto message_list = 4;

    pub fn clear_message_list(&mut self) {
        self.message_list.clear();
    }

    pub fn has_message_list(&self) -> bool {
        self.message_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_list(&mut self, v: super::message::ListProto) {
        self.message_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_list(&mut self) -> &mut super::message::ListProto {
        if self.message_list.is_none() {
            self.message_list.set_default();
        }
        self.message_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_message_list(&mut self) -> super::message::ListProto {
        self.message_list.take().unwrap_or_else(|| super::message::ListProto::new())
    }

    pub fn get_message_list(&self) -> &super::message::ListProto {
        self.message_list.as_ref().unwrap_or_else(|| super::message::ListProto::default_instance())
    }
}

impl ::protobuf::Message for LambdaResult {
    fn is_initialized(&self) -> bool {
        for v in &self.result_id_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.message_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.lambda_index)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result_id_list)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_id);
        }
        if !self.lambda_index.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.lambda_index);
        }
        if let Some(ref v) = self.result_id_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.message_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.query_id.is_empty() {
            os.write_string(1, &self.query_id)?;
        }
        if !self.lambda_index.is_empty() {
            os.write_string(2, &self.lambda_index)?;
        }
        if let Some(ref v) = self.result_id_list.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.message_list.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LambdaResult {
        LambdaResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query_id",
                    |m: &LambdaResult| { &m.query_id },
                    |m: &mut LambdaResult| { &mut m.query_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "lambda_index",
                    |m: &LambdaResult| { &m.lambda_index },
                    |m: &mut LambdaResult| { &mut m.lambda_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::ListLong>>(
                    "result_id_list",
                    |m: &LambdaResult| { &m.result_id_list },
                    |m: &mut LambdaResult| { &mut m.result_id_list },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::ListProto>>(
                    "message_list",
                    |m: &LambdaResult| { &m.message_list },
                    |m: &mut LambdaResult| { &mut m.message_list },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LambdaResult>(
                    "LambdaResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LambdaResult {
        static mut instance: ::protobuf::lazy::Lazy<LambdaResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LambdaResult,
        };
        unsafe {
            instance.get(LambdaResult::new)
        }
    }
}

impl ::protobuf::Clear for LambdaResult {
    fn clear(&mut self) {
        self.clear_query_id();
        self.clear_lambda_index();
        self.clear_result_id_list();
        self.clear_message_list();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LambdaResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LambdaResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14lambda_service.proto\x12\x08maxgraph\x1a\x10sdk/schema.proto\x1a\
    \x11sdk/message.proto\"\xa0\x01\n\nLambdaBase\x12\x19\n\x08query_id\x18\
    \x01\x20\x01(\tR\x07queryId\x12\x16\n\x06script\x18\x02\x20\x01(\tR\x06s\
    cript\x12\x1a\n\x08bytecode\x18\x03\x20\x01(\x0cR\x08bytecode\x12$\n\x06\
    schema\x18\x04\x20\x01(\x0b2\x0c.SchemaProtoR\x06schema\x12\x1d\n\ntimeo\
    ut_ms\x18\x05\x20\x01(\x04R\ttimeoutMs\"\x82\x01\n\nLambdaData\x12\x19\n\
    \x08query_id\x18\x01\x20\x01(\tR\x07queryId\x12!\n\x0clambda_index\x18\
    \x02\x20\x01(\tR\x0blambdaIndex\x126\n\x0cmessage_list\x18\x03\x20\x01(\
    \x0b2\x13.maxgraph.ListProtoR\x0bmessageList\"\xbe\x01\n\x0cLambdaResult\
    \x12\x19\n\x08query_id\x18\x01\x20\x01(\tR\x07queryId\x12!\n\x0clambda_i\
    ndex\x18\x02\x20\x01(\tR\x0blambdaIndex\x128\n\x0eresult_id_list\x18\x03\
    \x20\x01(\x0b2\x12.maxgraph.ListLongR\x0cresultIdList\x126\n\x0cmessage_\
    list\x18\x04\x20\x01(\x0b2\x13.maxgraph.ListProtoR\x0bmessageList2\xba\
    \x02\n\rLambdaService\x12>\n\x07prepare\x12\x14.maxgraph.LambdaBase\x1a\
    \x1b.maxgraph.OperationResponse\"\0\x12=\n\x06remove\x12\x14.maxgraph.La\
    mbdaBase\x1a\x1b.maxgraph.OperationResponse\"\0\x128\n\x06filter\x12\x14\
    .maxgraph.LambdaData\x1a\x16.maxgraph.LambdaResult\"\0\x125\n\x03map\x12\
    \x14.maxgraph.LambdaData\x1a\x16.maxgraph.LambdaResult\"\0\x129\n\x07fla\
    tmap\x12\x14.maxgraph.LambdaData\x1a\x16.maxgraph.LambdaResult\"\0B\x1c\
    \n\x1acom.alibaba.maxgraph.protob\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
