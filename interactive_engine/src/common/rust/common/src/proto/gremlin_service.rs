//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct ShowProcessListRequest {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ShowProcessListRequest {
    pub fn new() -> ShowProcessListRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ShowProcessListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShowProcessListRequest {
        ShowProcessListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ShowProcessListRequest>(
                    "ShowProcessListRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShowProcessListRequest {
        static mut instance: ::protobuf::lazy::Lazy<ShowProcessListRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShowProcessListRequest,
        };
        unsafe {
            instance.get(ShowProcessListRequest::new)
        }
    }
}

impl ::protobuf::Clear for ShowProcessListRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShowProcessListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShowProcessListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RunningQuery {
    // message fields
    pub query_id: ::std::string::String,
    pub script: ::std::string::String,
    pub elapsed_nano: i64,
    pub front_id: u32,
    pub dataflow_id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RunningQuery {
    pub fn new() -> RunningQuery {
        ::std::default::Default::default()
    }

    // string query_id = 1;

    pub fn clear_query_id(&mut self) {
        self.query_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_id(&mut self, v: ::std::string::String) {
        self.query_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_id(&mut self) -> &mut ::std::string::String {
        &mut self.query_id
    }

    // Take field
    pub fn take_query_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query_id, ::std::string::String::new())
    }

    pub fn get_query_id(&self) -> &str {
        &self.query_id
    }

    // string script = 2;

    pub fn clear_script(&mut self) {
        self.script.clear();
    }

    // Param is passed by value, moved
    pub fn set_script(&mut self, v: ::std::string::String) {
        self.script = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script(&mut self) -> &mut ::std::string::String {
        &mut self.script
    }

    // Take field
    pub fn take_script(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.script, ::std::string::String::new())
    }

    pub fn get_script(&self) -> &str {
        &self.script
    }

    // int64 elapsed_nano = 3;

    pub fn clear_elapsed_nano(&mut self) {
        self.elapsed_nano = 0;
    }

    // Param is passed by value, moved
    pub fn set_elapsed_nano(&mut self, v: i64) {
        self.elapsed_nano = v;
    }

    pub fn get_elapsed_nano(&self) -> i64 {
        self.elapsed_nano
    }

    // uint32 front_id = 4;

    pub fn clear_front_id(&mut self) {
        self.front_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_front_id(&mut self, v: u32) {
        self.front_id = v;
    }

    pub fn get_front_id(&self) -> u32 {
        self.front_id
    }

    // string dataflow_id = 5;

    pub fn clear_dataflow_id(&mut self) {
        self.dataflow_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_dataflow_id(&mut self, v: ::std::string::String) {
        self.dataflow_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dataflow_id(&mut self) -> &mut ::std::string::String {
        &mut self.dataflow_id
    }

    // Take field
    pub fn take_dataflow_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dataflow_id, ::std::string::String::new())
    }

    pub fn get_dataflow_id(&self) -> &str {
        &self.dataflow_id
    }
}

impl ::protobuf::Message for RunningQuery {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.script)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.elapsed_nano = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.front_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dataflow_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_id);
        }
        if !self.script.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.script);
        }
        if self.elapsed_nano != 0 {
            my_size += ::protobuf::rt::value_size(3, self.elapsed_nano, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.front_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.front_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.dataflow_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.dataflow_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.query_id.is_empty() {
            os.write_string(1, &self.query_id)?;
        }
        if !self.script.is_empty() {
            os.write_string(2, &self.script)?;
        }
        if self.elapsed_nano != 0 {
            os.write_int64(3, self.elapsed_nano)?;
        }
        if self.front_id != 0 {
            os.write_uint32(4, self.front_id)?;
        }
        if !self.dataflow_id.is_empty() {
            os.write_string(5, &self.dataflow_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RunningQuery {
        RunningQuery::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query_id",
                    |m: &RunningQuery| { &m.query_id },
                    |m: &mut RunningQuery| { &mut m.query_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "script",
                    |m: &RunningQuery| { &m.script },
                    |m: &mut RunningQuery| { &mut m.script },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "elapsed_nano",
                    |m: &RunningQuery| { &m.elapsed_nano },
                    |m: &mut RunningQuery| { &mut m.elapsed_nano },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "front_id",
                    |m: &RunningQuery| { &m.front_id },
                    |m: &mut RunningQuery| { &mut m.front_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "dataflow_id",
                    |m: &RunningQuery| { &m.dataflow_id },
                    |m: &mut RunningQuery| { &mut m.dataflow_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RunningQuery>(
                    "RunningQuery",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RunningQuery {
        static mut instance: ::protobuf::lazy::Lazy<RunningQuery> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RunningQuery,
        };
        unsafe {
            instance.get(RunningQuery::new)
        }
    }
}

impl ::protobuf::Clear for RunningQuery {
    fn clear(&mut self) {
        self.clear_query_id();
        self.clear_script();
        self.clear_elapsed_nano();
        self.clear_front_id();
        self.clear_dataflow_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RunningQuery {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RunningQuery {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ShowProcessListResponse {
    // message fields
    pub queries: ::protobuf::RepeatedField<RunningQuery>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ShowProcessListResponse {
    pub fn new() -> ShowProcessListResponse {
        ::std::default::Default::default()
    }

    // repeated .maxgraph.RunningQuery queries = 1;

    pub fn clear_queries(&mut self) {
        self.queries.clear();
    }

    // Param is passed by value, moved
    pub fn set_queries(&mut self, v: ::protobuf::RepeatedField<RunningQuery>) {
        self.queries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_queries(&mut self) -> &mut ::protobuf::RepeatedField<RunningQuery> {
        &mut self.queries
    }

    // Take field
    pub fn take_queries(&mut self) -> ::protobuf::RepeatedField<RunningQuery> {
        ::std::mem::replace(&mut self.queries, ::protobuf::RepeatedField::new())
    }

    pub fn get_queries(&self) -> &[RunningQuery] {
        &self.queries
    }
}

impl ::protobuf::Message for ShowProcessListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.queries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.queries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.queries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.queries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ShowProcessListResponse {
        ShowProcessListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RunningQuery>>(
                    "queries",
                    |m: &ShowProcessListResponse| { &m.queries },
                    |m: &mut ShowProcessListResponse| { &mut m.queries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ShowProcessListResponse>(
                    "ShowProcessListResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ShowProcessListResponse {
        static mut instance: ::protobuf::lazy::Lazy<ShowProcessListResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ShowProcessListResponse,
        };
        unsafe {
            instance.get(ShowProcessListResponse::new)
        }
    }
}

impl ::protobuf::Clear for ShowProcessListResponse {
    fn clear(&mut self) {
        self.clear_queries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ShowProcessListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ShowProcessListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelDataflowRequest {
    // message fields
    pub query_id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CancelDataflowRequest {
    pub fn new() -> CancelDataflowRequest {
        ::std::default::Default::default()
    }

    // string query_id = 1;

    pub fn clear_query_id(&mut self) {
        self.query_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_id(&mut self, v: ::std::string::String) {
        self.query_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_id(&mut self) -> &mut ::std::string::String {
        &mut self.query_id
    }

    // Take field
    pub fn take_query_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query_id, ::std::string::String::new())
    }

    pub fn get_query_id(&self) -> &str {
        &self.query_id
    }
}

impl ::protobuf::Message for CancelDataflowRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.query_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.query_id.is_empty() {
            os.write_string(1, &self.query_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelDataflowRequest {
        CancelDataflowRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "query_id",
                    |m: &CancelDataflowRequest| { &m.query_id },
                    |m: &mut CancelDataflowRequest| { &mut m.query_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CancelDataflowRequest>(
                    "CancelDataflowRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelDataflowRequest {
        static mut instance: ::protobuf::lazy::Lazy<CancelDataflowRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelDataflowRequest,
        };
        unsafe {
            instance.get(CancelDataflowRequest::new)
        }
    }
}

impl ::protobuf::Clear for CancelDataflowRequest {
    fn clear(&mut self) {
        self.clear_query_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelDataflowRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelDataflowRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelDataflowByFrontRequest {
    // message fields
    pub front_id: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CancelDataflowByFrontRequest {
    pub fn new() -> CancelDataflowByFrontRequest {
        ::std::default::Default::default()
    }

    // uint32 front_id = 1;

    pub fn clear_front_id(&mut self) {
        self.front_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_front_id(&mut self, v: u32) {
        self.front_id = v;
    }

    pub fn get_front_id(&self) -> u32 {
        self.front_id
    }
}

impl ::protobuf::Message for CancelDataflowByFrontRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.front_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.front_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.front_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.front_id != 0 {
            os.write_uint32(1, self.front_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelDataflowByFrontRequest {
        CancelDataflowByFrontRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "front_id",
                    |m: &CancelDataflowByFrontRequest| { &m.front_id },
                    |m: &mut CancelDataflowByFrontRequest| { &mut m.front_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CancelDataflowByFrontRequest>(
                    "CancelDataflowByFrontRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelDataflowByFrontRequest {
        static mut instance: ::protobuf::lazy::Lazy<CancelDataflowByFrontRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelDataflowByFrontRequest,
        };
        unsafe {
            instance.get(CancelDataflowByFrontRequest::new)
        }
    }
}

impl ::protobuf::Clear for CancelDataflowByFrontRequest {
    fn clear(&mut self) {
        self.clear_front_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelDataflowByFrontRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelDataflowByFrontRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelDataflowResponse {
    // message fields
    pub success: bool,
    pub message: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl CancelDataflowResponse {
    pub fn new() -> CancelDataflowResponse {
        ::std::default::Default::default()
    }

    // bool success = 1;

    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    pub fn get_success(&self) -> bool {
        self.success
    }

    // string message = 2;

    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    pub fn get_message(&self) -> &str {
        &self.message
    }
}

impl ::protobuf::Message for CancelDataflowResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.success != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.success != false {
            os.write_bool(1, self.success)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelDataflowResponse {
        CancelDataflowResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &CancelDataflowResponse| { &m.success },
                    |m: &mut CancelDataflowResponse| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "message",
                    |m: &CancelDataflowResponse| { &m.message },
                    |m: &mut CancelDataflowResponse| { &mut m.message },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CancelDataflowResponse>(
                    "CancelDataflowResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelDataflowResponse {
        static mut instance: ::protobuf::lazy::Lazy<CancelDataflowResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelDataflowResponse,
        };
        unsafe {
            instance.get(CancelDataflowResponse::new)
        }
    }
}

impl ::protobuf::Clear for CancelDataflowResponse {
    fn clear(&mut self) {
        self.clear_success();
        self.clear_message();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelDataflowResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelDataflowResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x15gremlin_service.proto\x12\x08maxgraph\x1a\x10query_flow.proto\x1a\
    \x11sdk/message.proto\"\x18\n\x16ShowProcessListRequest\"\xa0\x01\n\x0cR\
    unningQuery\x12\x19\n\x08query_id\x18\x01\x20\x01(\tR\x07queryId\x12\x16\
    \n\x06script\x18\x02\x20\x01(\tR\x06script\x12!\n\x0celapsed_nano\x18\
    \x03\x20\x01(\x03R\x0belapsedNano\x12\x19\n\x08front_id\x18\x04\x20\x01(\
    \rR\x07frontId\x12\x1f\n\x0bdataflow_id\x18\x05\x20\x01(\tR\ndataflowId\
    \"K\n\x17ShowProcessListResponse\x120\n\x07queries\x18\x01\x20\x03(\x0b2\
    \x16.maxgraph.RunningQueryR\x07queries\"2\n\x15CancelDataflowRequest\x12\
    \x19\n\x08query_id\x18\x01\x20\x01(\tR\x07queryId\"9\n\x1cCancelDataflow\
    ByFrontRequest\x12\x19\n\x08front_id\x18\x01\x20\x01(\rR\x07frontId\"L\n\
    \x16CancelDataflowResponse\x12\x18\n\x07success\x18\x01\x20\x01(\x08R\
    \x07success\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message2\xca\x02\
    \n\x0fMaxGraphService\x129\n\x05query\x12\x13.maxgraph.QueryFlow\x1a\x17\
    .maxgraph.QueryResponse\"\00\x01\x12=\n\x07prepare\x12\x13.maxgraph.Quer\
    yFlow\x1a\x1b.maxgraph.OperationResponse\"\0\x126\n\x06query2\x12\x0f.ma\
    xgraph.Query\x1a\x17.maxgraph.QueryResponse\"\00\x01\x12;\n\x07execute\
    \x12\x13.maxgraph.QueryFlow\x1a\x17.maxgraph.QueryResponse\"\00\x01\x12H\
    \n\x06remove\x12\x1f.maxgraph.RemoveDataflowRequest\x1a\x1b.maxgraph.Ope\
    rationResponse\"\02\xab\x02\n\x13MaxGraphCtrlService\x12X\n\x0fshowProce\
    ssList\x12\x20.maxgraph.ShowProcessListRequest\x1a!.maxgraph.ShowProcess\
    ListResponse\"\0\x12U\n\x0ecancelDataflow\x12\x1f.maxgraph.CancelDataflo\
    wRequest\x1a\x20.maxgraph.CancelDataflowResponse\"\0\x12c\n\x15cancelDat\
    aflowByFront\x12&.maxgraph.CancelDataflowByFrontRequest\x1a\x20.maxgraph\
    .CancelDataflowResponse\"\02\xe8\x02\n\x14AsyncMaxGraphService\x12>\n\na\
    syncQuery\x12\x13.maxgraph.QueryFlow\x1a\x17.maxgraph.QueryResponse\"\00\
    \x01\x12B\n\x0casyncPrepare\x12\x13.maxgraph.QueryFlow\x1a\x1b.maxgraph.\
    OperationResponse\"\0\x12;\n\x0basyncQuery2\x12\x0f.maxgraph.Query\x1a\
    \x17.maxgraph.QueryResponse\"\00\x01\x12@\n\x0casyncExecute\x12\x13.maxg\
    raph.QueryFlow\x1a\x17.maxgraph.QueryResponse\"\00\x01\x12M\n\x0basyncRe\
    move\x12\x1f.maxgraph.RemoveDataflowRequest\x1a\x1b.maxgraph.OperationRe\
    sponse\"\0B\x1a\n\x18com.alibaba.maxgraph.rpcb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
