//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct RuntimeEnv {
    // message fields
    pub id: u32,
    pub port: u32,
    pub ip: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RuntimeEnv {
    pub fn new() -> RuntimeEnv {
        ::std::default::Default::default()
    }

    // uint32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    pub fn get_id(&self) -> u32 {
        self.id
    }

    // uint32 port = 2;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }

    pub fn get_port(&self) -> u32 {
        self.port
    }

    // string ip = 3;

    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    pub fn get_ip(&self) -> &str {
        &self.ip
    }
}

impl ::protobuf::Message for RuntimeEnv {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ip);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.port != 0 {
            os.write_uint32(2, self.port)?;
        }
        if !self.ip.is_empty() {
            os.write_string(3, &self.ip)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RuntimeEnv {
        RuntimeEnv::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &RuntimeEnv| { &m.id },
                    |m: &mut RuntimeEnv| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "port",
                    |m: &RuntimeEnv| { &m.port },
                    |m: &mut RuntimeEnv| { &mut m.port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip",
                    |m: &RuntimeEnv| { &m.ip },
                    |m: &mut RuntimeEnv| { &mut m.ip },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RuntimeEnv>(
                    "RuntimeEnv",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RuntimeEnv {
        static mut instance: ::protobuf::lazy::Lazy<RuntimeEnv> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RuntimeEnv,
        };
        unsafe {
            instance.get(RuntimeEnv::new)
        }
    }
}

impl ::protobuf::Clear for RuntimeEnv {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_port();
        self.clear_ip();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RuntimeEnv {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeEnv {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RuntimeEnvList {
    // message fields
    pub envs: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RuntimeEnvList {
    pub fn new() -> RuntimeEnvList {
        ::std::default::Default::default()
    }

    // repeated string envs = 1;

    pub fn clear_envs(&mut self) {
        self.envs.clear();
    }

    // Param is passed by value, moved
    pub fn set_envs(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.envs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_envs(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.envs
    }

    // Take field
    pub fn take_envs(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.envs, ::protobuf::RepeatedField::new())
    }

    pub fn get_envs(&self) -> &[::std::string::String] {
        &self.envs
    }
}

impl ::protobuf::Message for RuntimeEnvList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.envs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.envs {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.envs {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RuntimeEnvList {
        RuntimeEnvList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "envs",
                    |m: &RuntimeEnvList| { &m.envs },
                    |m: &mut RuntimeEnvList| { &mut m.envs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RuntimeEnvList>(
                    "RuntimeEnvList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RuntimeEnvList {
        static mut instance: ::protobuf::lazy::Lazy<RuntimeEnvList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RuntimeEnvList,
        };
        unsafe {
            instance.get(RuntimeEnvList::new)
        }
    }
}

impl ::protobuf::Clear for RuntimeEnvList {
    fn clear(&mut self) {
        self.clear_envs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RuntimeEnvList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeEnvList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeID {
    // message fields
    pub id: i32,
    pub role: RoleType,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NodeID {
    pub fn new() -> NodeID {
        ::std::default::Default::default()
    }

    // int32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    pub fn get_id(&self) -> i32 {
        self.id
    }

    // .RoleType role = 2;

    pub fn clear_role(&mut self) {
        self.role = RoleType::AM;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: RoleType) {
        self.role = v;
    }

    pub fn get_role(&self) -> RoleType {
        self.role
    }
}

impl ::protobuf::Message for NodeID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.role != RoleType::AM {
            my_size += ::protobuf::rt::enum_size(2, self.role);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if self.role != RoleType::AM {
            os.write_enum(2, self.role.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeID {
        NodeID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &NodeID| { &m.id },
                    |m: &mut NodeID| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RoleType>>(
                    "role",
                    |m: &NodeID| { &m.role },
                    |m: &mut NodeID| { &mut m.role },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeID>(
                    "NodeID",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeID {
        static mut instance: ::protobuf::lazy::Lazy<NodeID> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeID,
        };
        unsafe {
            instance.get(NodeID::new)
        }
    }
}

impl ::protobuf::Clear for NodeID {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_role();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeID {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeInfo {
    // message fields
    pub nodeId: ::protobuf::SingularPtrField<NodeID>,
    pub serverId: i32,
    pub host: ::std::string::String,
    pub port: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NodeInfo {
    pub fn new() -> NodeInfo {
        ::std::default::Default::default()
    }

    // .NodeID nodeId = 1;

    pub fn clear_nodeId(&mut self) {
        self.nodeId.clear();
    }

    pub fn has_nodeId(&self) -> bool {
        self.nodeId.is_some()
    }

    // Param is passed by value, moved
    pub fn set_nodeId(&mut self, v: NodeID) {
        self.nodeId = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nodeId(&mut self) -> &mut NodeID {
        if self.nodeId.is_none() {
            self.nodeId.set_default();
        }
        self.nodeId.as_mut().unwrap()
    }

    // Take field
    pub fn take_nodeId(&mut self) -> NodeID {
        self.nodeId.take().unwrap_or_else(|| NodeID::new())
    }

    pub fn get_nodeId(&self) -> &NodeID {
        self.nodeId.as_ref().unwrap_or_else(|| NodeID::default_instance())
    }

    // int32 serverId = 2;

    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: i32) {
        self.serverId = v;
    }

    pub fn get_serverId(&self) -> i32 {
        self.serverId
    }

    // string host = 3;

    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    pub fn get_host(&self) -> &str {
        &self.host
    }

    // int32 port = 4;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }

    pub fn get_port(&self) -> i32 {
        self.port
    }
}

impl ::protobuf::Message for NodeInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.nodeId {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.nodeId)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.serverId = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.nodeId.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.host);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(4, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.nodeId.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.serverId != 0 {
            os.write_int32(2, self.serverId)?;
        }
        if !self.host.is_empty() {
            os.write_string(3, &self.host)?;
        }
        if self.port != 0 {
            os.write_int32(4, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeInfo {
        NodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeID>>(
                    "nodeId",
                    |m: &NodeInfo| { &m.nodeId },
                    |m: &mut NodeInfo| { &mut m.nodeId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "serverId",
                    |m: &NodeInfo| { &m.serverId },
                    |m: &mut NodeInfo| { &mut m.serverId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &NodeInfo| { &m.host },
                    |m: &mut NodeInfo| { &mut m.host },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "port",
                    |m: &NodeInfo| { &m.port },
                    |m: &mut NodeInfo| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeInfo>(
                    "NodeInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeInfo {
        static mut instance: ::protobuf::lazy::Lazy<NodeInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeInfo,
        };
        unsafe {
            instance.get(NodeInfo::new)
        }
    }
}

impl ::protobuf::Clear for NodeInfo {
    fn clear(&mut self) {
        self.clear_nodeId();
        self.clear_serverId();
        self.clear_host();
        self.clear_port();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PartitionInfo {
    // message fields
    pub shardInfos: ::std::collections::HashMap<i32, ShardState>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl PartitionInfo {
    pub fn new() -> PartitionInfo {
        ::std::default::Default::default()
    }

    // repeated .PartitionInfo.ShardInfosEntry shardInfos = 1;

    pub fn clear_shardInfos(&mut self) {
        self.shardInfos.clear();
    }

    // Param is passed by value, moved
    pub fn set_shardInfos(&mut self, v: ::std::collections::HashMap<i32, ShardState>) {
        self.shardInfos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_shardInfos(&mut self) -> &mut ::std::collections::HashMap<i32, ShardState> {
        &mut self.shardInfos
    }

    // Take field
    pub fn take_shardInfos(&mut self) -> ::std::collections::HashMap<i32, ShardState> {
        ::std::mem::replace(&mut self.shardInfos, ::std::collections::HashMap::new())
    }

    pub fn get_shardInfos(&self) -> &::std::collections::HashMap<i32, ShardState> {
        &self.shardInfos
    }
}

impl ::protobuf::Message for PartitionInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<ShardState>>(wire_type, is, &mut self.shardInfos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<ShardState>>(1, &self.shardInfos);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<ShardState>>(1, &self.shardInfos, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartitionInfo {
        PartitionInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeEnum<ShardState>>(
                    "shardInfos",
                    |m: &PartitionInfo| { &m.shardInfos },
                    |m: &mut PartitionInfo| { &mut m.shardInfos },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PartitionInfo>(
                    "PartitionInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PartitionInfo {
        static mut instance: ::protobuf::lazy::Lazy<PartitionInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PartitionInfo,
        };
        unsafe {
            instance.get(PartitionInfo::new)
        }
    }
}

impl ::protobuf::Clear for PartitionInfo {
    fn clear(&mut self) {
        self.clear_shardInfos();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartitionInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartitionInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StateList {
    // message fields
    pub states: ::std::vec::Vec<i64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl StateList {
    pub fn new() -> StateList {
        ::std::default::Default::default()
    }

    // repeated int64 states = 1;

    pub fn clear_states(&mut self) {
        self.states.clear();
    }

    // Param is passed by value, moved
    pub fn set_states(&mut self, v: ::std::vec::Vec<i64>) {
        self.states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_states(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.states
    }

    // Take field
    pub fn take_states(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.states, ::std::vec::Vec::new())
    }

    pub fn get_states(&self) -> &[i64] {
        &self.states
    }
}

impl ::protobuf::Message for StateList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.states {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.states {
            os.write_int64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StateList {
        StateList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "states",
                    |m: &StateList| { &m.states },
                    |m: &mut StateList| { &mut m.states },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StateList>(
                    "StateList",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StateList {
        static mut instance: ::protobuf::lazy::Lazy<StateList> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StateList,
        };
        unsafe {
            instance.get(StateList::new)
        }
    }
}

impl ::protobuf::Clear for StateList {
    fn clear(&mut self) {
        self.clear_states();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StateList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateList {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeStateProto {
    // message fields
    pub nodeStateMap: ::std::collections::HashMap<i32, StateList>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NodeStateProto {
    pub fn new() -> NodeStateProto {
        ::std::default::Default::default()
    }

    // repeated .NodeStateProto.NodeStateMapEntry nodeStateMap = 1;

    pub fn clear_nodeStateMap(&mut self) {
        self.nodeStateMap.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodeStateMap(&mut self, v: ::std::collections::HashMap<i32, StateList>) {
        self.nodeStateMap = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodeStateMap(&mut self) -> &mut ::std::collections::HashMap<i32, StateList> {
        &mut self.nodeStateMap
    }

    // Take field
    pub fn take_nodeStateMap(&mut self) -> ::std::collections::HashMap<i32, StateList> {
        ::std::mem::replace(&mut self.nodeStateMap, ::std::collections::HashMap::new())
    }

    pub fn get_nodeStateMap(&self) -> &::std::collections::HashMap<i32, StateList> {
        &self.nodeStateMap
    }
}

impl ::protobuf::Message for NodeStateProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<StateList>>(wire_type, is, &mut self.nodeStateMap)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<StateList>>(1, &self.nodeStateMap);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<StateList>>(1, &self.nodeStateMap, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeStateProto {
        NodeStateProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<StateList>>(
                    "nodeStateMap",
                    |m: &NodeStateProto| { &m.nodeStateMap },
                    |m: &mut NodeStateProto| { &mut m.nodeStateMap },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeStateProto>(
                    "NodeStateProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeStateProto {
        static mut instance: ::protobuf::lazy::Lazy<NodeStateProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeStateProto,
        };
        unsafe {
            instance.get(NodeStateProto::new)
        }
    }
}

impl ::protobuf::Clear for NodeStateProto {
    fn clear(&mut self) {
        self.clear_nodeStateMap();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeStateProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStateProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterStateProto {
    // message fields
    pub nodes: ::protobuf::RepeatedField<NodeInfo>,
    pub partitions: ::std::collections::HashMap<i32, PartitionInfo>,
    pub version: i64,
    pub expectedStateMap: ::std::collections::HashMap<i32, NodeStateProto>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ClusterStateProto {
    pub fn new() -> ClusterStateProto {
        ::std::default::Default::default()
    }

    // repeated .NodeInfo nodes = 1;

    pub fn clear_nodes(&mut self) {
        self.nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_nodes(&mut self, v: ::protobuf::RepeatedField<NodeInfo>) {
        self.nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_nodes(&mut self) -> &mut ::protobuf::RepeatedField<NodeInfo> {
        &mut self.nodes
    }

    // Take field
    pub fn take_nodes(&mut self) -> ::protobuf::RepeatedField<NodeInfo> {
        ::std::mem::replace(&mut self.nodes, ::protobuf::RepeatedField::new())
    }

    pub fn get_nodes(&self) -> &[NodeInfo] {
        &self.nodes
    }

    // repeated .ClusterStateProto.PartitionsEntry partitions = 2;

    pub fn clear_partitions(&mut self) {
        self.partitions.clear();
    }

    // Param is passed by value, moved
    pub fn set_partitions(&mut self, v: ::std::collections::HashMap<i32, PartitionInfo>) {
        self.partitions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_partitions(&mut self) -> &mut ::std::collections::HashMap<i32, PartitionInfo> {
        &mut self.partitions
    }

    // Take field
    pub fn take_partitions(&mut self) -> ::std::collections::HashMap<i32, PartitionInfo> {
        ::std::mem::replace(&mut self.partitions, ::std::collections::HashMap::new())
    }

    pub fn get_partitions(&self) -> &::std::collections::HashMap<i32, PartitionInfo> {
        &self.partitions
    }

    // int64 version = 3;

    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: i64) {
        self.version = v;
    }

    pub fn get_version(&self) -> i64 {
        self.version
    }

    // repeated .ClusterStateProto.ExpectedStateMapEntry expectedStateMap = 4;

    pub fn clear_expectedStateMap(&mut self) {
        self.expectedStateMap.clear();
    }

    // Param is passed by value, moved
    pub fn set_expectedStateMap(&mut self, v: ::std::collections::HashMap<i32, NodeStateProto>) {
        self.expectedStateMap = v;
    }

    // Mutable pointer to the field.
    pub fn mut_expectedStateMap(&mut self) -> &mut ::std::collections::HashMap<i32, NodeStateProto> {
        &mut self.expectedStateMap
    }

    // Take field
    pub fn take_expectedStateMap(&mut self) -> ::std::collections::HashMap<i32, NodeStateProto> {
        ::std::mem::replace(&mut self.expectedStateMap, ::std::collections::HashMap::new())
    }

    pub fn get_expectedStateMap(&self) -> &::std::collections::HashMap<i32, NodeStateProto> {
        &self.expectedStateMap
    }
}

impl ::protobuf::Message for ClusterStateProto {
    fn is_initialized(&self) -> bool {
        for v in &self.nodes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.nodes)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<PartitionInfo>>(wire_type, is, &mut self.partitions)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.version = tmp;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<NodeStateProto>>(wire_type, is, &mut self.expectedStateMap)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.nodes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<PartitionInfo>>(2, &self.partitions);
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(3, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<NodeStateProto>>(4, &self.expectedStateMap);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.nodes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<PartitionInfo>>(2, &self.partitions, os)?;
        if self.version != 0 {
            os.write_int64(3, self.version)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<NodeStateProto>>(4, &self.expectedStateMap, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterStateProto {
        ClusterStateProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<NodeInfo>>(
                    "nodes",
                    |m: &ClusterStateProto| { &m.nodes },
                    |m: &mut ClusterStateProto| { &mut m.nodes },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<PartitionInfo>>(
                    "partitions",
                    |m: &ClusterStateProto| { &m.partitions },
                    |m: &mut ClusterStateProto| { &mut m.partitions },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "version",
                    |m: &ClusterStateProto| { &m.version },
                    |m: &mut ClusterStateProto| { &mut m.version },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt32, ::protobuf::types::ProtobufTypeMessage<NodeStateProto>>(
                    "expectedStateMap",
                    |m: &ClusterStateProto| { &m.expectedStateMap },
                    |m: &mut ClusterStateProto| { &mut m.expectedStateMap },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ClusterStateProto>(
                    "ClusterStateProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ClusterStateProto {
        static mut instance: ::protobuf::lazy::Lazy<ClusterStateProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ClusterStateProto,
        };
        unsafe {
            instance.get(ClusterStateProto::new)
        }
    }
}

impl ::protobuf::Clear for ClusterStateProto {
    fn clear(&mut self) {
        self.clear_nodes();
        self.clear_partitions();
        self.clear_version();
        self.clear_expectedStateMap();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterStateProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterStateProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerIdAliveIdProto {
    // message fields
    pub serverId: i32,
    pub aliveId: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ServerIdAliveIdProto {
    pub fn new() -> ServerIdAliveIdProto {
        ::std::default::Default::default()
    }

    // int32 serverId = 1;

    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: i32) {
        self.serverId = v;
    }

    pub fn get_serverId(&self) -> i32 {
        self.serverId
    }

    // int64 aliveId = 2;

    pub fn clear_aliveId(&mut self) {
        self.aliveId = 0;
    }

    // Param is passed by value, moved
    pub fn set_aliveId(&mut self, v: i64) {
        self.aliveId = v;
    }

    pub fn get_aliveId(&self) -> i64 {
        self.aliveId
    }
}

impl ::protobuf::Message for ServerIdAliveIdProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.serverId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.aliveId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.aliveId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.aliveId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.serverId != 0 {
            os.write_int32(1, self.serverId)?;
        }
        if self.aliveId != 0 {
            os.write_int64(2, self.aliveId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerIdAliveIdProto {
        ServerIdAliveIdProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "serverId",
                    |m: &ServerIdAliveIdProto| { &m.serverId },
                    |m: &mut ServerIdAliveIdProto| { &mut m.serverId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "aliveId",
                    |m: &ServerIdAliveIdProto| { &m.aliveId },
                    |m: &mut ServerIdAliveIdProto| { &mut m.aliveId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerIdAliveIdProto>(
                    "ServerIdAliveIdProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerIdAliveIdProto {
        static mut instance: ::protobuf::lazy::Lazy<ServerIdAliveIdProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerIdAliveIdProto,
        };
        unsafe {
            instance.get(ServerIdAliveIdProto::new)
        }
    }
}

impl ::protobuf::Clear for ServerIdAliveIdProto {
    fn clear(&mut self) {
        self.clear_serverId();
        self.clear_aliveId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerIdAliveIdProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerIdAliveIdProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RoleType {
    AM = 0,
    EXECUTOR = 1,
    COORDINATOR = 2,
    ID_SERVICE = 3,
    FRONTEND = 4,
    INGEST_NODE = 5,
    STORE_NODE = 6,
    COMPUTE_WORKER = 7,
    COMPUTE_MASTER = 8,
}

impl ::protobuf::ProtobufEnum for RoleType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RoleType> {
        match value {
            0 => ::std::option::Option::Some(RoleType::AM),
            1 => ::std::option::Option::Some(RoleType::EXECUTOR),
            2 => ::std::option::Option::Some(RoleType::COORDINATOR),
            3 => ::std::option::Option::Some(RoleType::ID_SERVICE),
            4 => ::std::option::Option::Some(RoleType::FRONTEND),
            5 => ::std::option::Option::Some(RoleType::INGEST_NODE),
            6 => ::std::option::Option::Some(RoleType::STORE_NODE),
            7 => ::std::option::Option::Some(RoleType::COMPUTE_WORKER),
            8 => ::std::option::Option::Some(RoleType::COMPUTE_MASTER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RoleType] = &[
            RoleType::AM,
            RoleType::EXECUTOR,
            RoleType::COORDINATOR,
            RoleType::ID_SERVICE,
            RoleType::FRONTEND,
            RoleType::INGEST_NODE,
            RoleType::STORE_NODE,
            RoleType::COMPUTE_WORKER,
            RoleType::COMPUTE_MASTER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("RoleType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for RoleType {
}

impl ::std::default::Default for RoleType {
    fn default() -> Self {
        RoleType::AM
    }
}

impl ::protobuf::reflect::ProtobufValue for RoleType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ShardState {
    CREATED = 0,
    RECOVERING = 1,
    ONLINING = 2,
}

impl ::protobuf::ProtobufEnum for ShardState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ShardState> {
        match value {
            0 => ::std::option::Option::Some(ShardState::CREATED),
            1 => ::std::option::Option::Some(ShardState::RECOVERING),
            2 => ::std::option::Option::Some(ShardState::ONLINING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ShardState] = &[
            ShardState::CREATED,
            ShardState::RECOVERING,
            ShardState::ONLINING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ShardState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ShardState {
}

impl ::std::default::Default for ShardState {
    fn default() -> Self {
        ShardState::CREATED
    }
}

impl ::protobuf::reflect::ProtobufValue for ShardState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rcluster.proto\"@\n\nRuntimeEnv\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\
    \x02id\x12\x12\n\x04port\x18\x02\x20\x01(\rR\x04port\x12\x0e\n\x02ip\x18\
    \x03\x20\x01(\tR\x02ip\"$\n\x0eRuntimeEnvList\x12\x12\n\x04envs\x18\x01\
    \x20\x03(\tR\x04envs\"7\n\x06NodeID\x12\x0e\n\x02id\x18\x01\x20\x01(\x05\
    R\x02id\x12\x1d\n\x04role\x18\x02\x20\x01(\x0e2\t.RoleTypeR\x04role\"o\n\
    \x08NodeInfo\x12\x1f\n\x06nodeId\x18\x01\x20\x01(\x0b2\x07.NodeIDR\x06no\
    deId\x12\x1a\n\x08serverId\x18\x02\x20\x01(\x05R\x08serverId\x12\x12\n\
    \x04host\x18\x03\x20\x01(\tR\x04host\x12\x12\n\x04port\x18\x04\x20\x01(\
    \x05R\x04port\"\x9b\x01\n\rPartitionInfo\x12>\n\nshardInfos\x18\x01\x20\
    \x03(\x0b2\x1e.PartitionInfo.ShardInfosEntryR\nshardInfos\x1aJ\n\x0fShar\
    dInfosEntry\x12\x10\n\x03key\x18\x01\x20\x01(\x05R\x03key\x12!\n\x05valu\
    e\x18\x02\x20\x01(\x0e2\x0b.ShardStateR\x05value:\x028\x01\"#\n\tStateLi\
    st\x12\x16\n\x06states\x18\x01\x20\x03(\x03R\x06states\"\xa4\x01\n\x0eNo\
    deStateProto\x12E\n\x0cnodeStateMap\x18\x01\x20\x03(\x0b2!.NodeStateProt\
    o.NodeStateMapEntryR\x0cnodeStateMap\x1aK\n\x11NodeStateMapEntry\x12\x10\
    \n\x03key\x18\x01\x20\x01(\x05R\x03key\x12\x20\n\x05value\x18\x02\x20\
    \x01(\x0b2\n.StateListR\x05value:\x028\x01\"\x8d\x03\n\x11ClusterStatePr\
    oto\x12\x1f\n\x05nodes\x18\x01\x20\x03(\x0b2\t.NodeInfoR\x05nodes\x12B\n\
    \npartitions\x18\x02\x20\x03(\x0b2\".ClusterStateProto.PartitionsEntryR\
    \npartitions\x12\x18\n\x07version\x18\x03\x20\x01(\x03R\x07version\x12T\
    \n\x10expectedStateMap\x18\x04\x20\x03(\x0b2(.ClusterStateProto.Expected\
    StateMapEntryR\x10expectedStateMap\x1aM\n\x0fPartitionsEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\x05R\x03key\x12$\n\x05value\x18\x02\x20\x01(\
    \x0b2\x0e.PartitionInfoR\x05value:\x028\x01\x1aT\n\x15ExpectedStateMapEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\x05R\x03key\x12%\n\x05value\x18\
    \x02\x20\x01(\x0b2\x0f.NodeStateProtoR\x05value:\x028\x01\"L\n\x14Server\
    IdAliveIdProto\x12\x1a\n\x08serverId\x18\x01\x20\x01(\x05R\x08serverId\
    \x12\x18\n\x07aliveId\x18\x02\x20\x01(\x03R\x07aliveId*\x98\x01\n\x08Rol\
    eType\x12\x06\n\x02AM\x10\0\x12\x0c\n\x08EXECUTOR\x10\x01\x12\x0f\n\x0bC\
    OORDINATOR\x10\x02\x12\x0e\n\nID_SERVICE\x10\x03\x12\x0c\n\x08FRONTEND\
    \x10\x04\x12\x0f\n\x0bINGEST_NODE\x10\x05\x12\x0e\n\nSTORE_NODE\x10\x06\
    \x12\x12\n\x0eCOMPUTE_WORKER\x10\x07\x12\x12\n\x0eCOMPUTE_MASTER\x10\x08\
    *7\n\nShardState\x12\x0b\n\x07CREATED\x10\0\x12\x0e\n\nRECOVERING\x10\
    \x01\x12\x0c\n\x08ONLINING\x10\x02B2\n\x1acom.alibaba.maxgraph.protoB\
    \x0cClusterProtoP\x01\xa0\x01\x01\x88\x01\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
