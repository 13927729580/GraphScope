//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct EndpointProto {
    // message fields
    pub host: ::std::string::String,
    pub port: i32,
    pub gremlinServerPort: i32,
    pub runtimePort: i32,
    pub runtimCtrlAndAsyncPort: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EndpointProto {
    pub fn new() -> EndpointProto {
        ::std::default::Default::default()
    }

    // string host = 1;

    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    pub fn get_host(&self) -> &str {
        &self.host
    }

    // int32 port = 2;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }

    pub fn get_port(&self) -> i32 {
        self.port
    }

    // int32 gremlinServerPort = 3;

    pub fn clear_gremlinServerPort(&mut self) {
        self.gremlinServerPort = 0;
    }

    // Param is passed by value, moved
    pub fn set_gremlinServerPort(&mut self, v: i32) {
        self.gremlinServerPort = v;
    }

    pub fn get_gremlinServerPort(&self) -> i32 {
        self.gremlinServerPort
    }

    // int32 runtimePort = 4;

    pub fn clear_runtimePort(&mut self) {
        self.runtimePort = 0;
    }

    // Param is passed by value, moved
    pub fn set_runtimePort(&mut self, v: i32) {
        self.runtimePort = v;
    }

    pub fn get_runtimePort(&self) -> i32 {
        self.runtimePort
    }

    // int32 runtimCtrlAndAsyncPort = 5;

    pub fn clear_runtimCtrlAndAsyncPort(&mut self) {
        self.runtimCtrlAndAsyncPort = 0;
    }

    // Param is passed by value, moved
    pub fn set_runtimCtrlAndAsyncPort(&mut self, v: i32) {
        self.runtimCtrlAndAsyncPort = v;
    }

    pub fn get_runtimCtrlAndAsyncPort(&self) -> i32 {
        self.runtimCtrlAndAsyncPort
    }
}

impl ::protobuf::Message for EndpointProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gremlinServerPort = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.runtimePort = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.runtimCtrlAndAsyncPort = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gremlinServerPort != 0 {
            my_size += ::protobuf::rt::value_size(3, self.gremlinServerPort, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.runtimePort != 0 {
            my_size += ::protobuf::rt::value_size(4, self.runtimePort, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.runtimCtrlAndAsyncPort != 0 {
            my_size += ::protobuf::rt::value_size(5, self.runtimCtrlAndAsyncPort, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if self.port != 0 {
            os.write_int32(2, self.port)?;
        }
        if self.gremlinServerPort != 0 {
            os.write_int32(3, self.gremlinServerPort)?;
        }
        if self.runtimePort != 0 {
            os.write_int32(4, self.runtimePort)?;
        }
        if self.runtimCtrlAndAsyncPort != 0 {
            os.write_int32(5, self.runtimCtrlAndAsyncPort)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EndpointProto {
        EndpointProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &EndpointProto| { &m.host },
                    |m: &mut EndpointProto| { &mut m.host },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "port",
                    |m: &EndpointProto| { &m.port },
                    |m: &mut EndpointProto| { &mut m.port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "gremlinServerPort",
                    |m: &EndpointProto| { &m.gremlinServerPort },
                    |m: &mut EndpointProto| { &mut m.gremlinServerPort },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "runtimePort",
                    |m: &EndpointProto| { &m.runtimePort },
                    |m: &mut EndpointProto| { &mut m.runtimePort },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "runtimCtrlAndAsyncPort",
                    |m: &EndpointProto| { &m.runtimCtrlAndAsyncPort },
                    |m: &mut EndpointProto| { &mut m.runtimCtrlAndAsyncPort },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EndpointProto>(
                    "EndpointProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EndpointProto {
        static mut instance: ::protobuf::lazy::Lazy<EndpointProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EndpointProto,
        };
        unsafe {
            instance.get(EndpointProto::new)
        }
    }
}

impl ::protobuf::Clear for EndpointProto {
    fn clear(&mut self) {
        self.clear_host();
        self.clear_port();
        self.clear_gremlinServerPort();
        self.clear_runtimePort();
        self.clear_runtimCtrlAndAsyncPort();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub traceId: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string traceId = 1;

    pub fn clear_traceId(&mut self) {
        self.traceId.clear();
    }

    // Param is passed by value, moved
    pub fn set_traceId(&mut self, v: ::std::string::String) {
        self.traceId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_traceId(&mut self) -> &mut ::std::string::String {
        &mut self.traceId
    }

    // Take field
    pub fn take_traceId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.traceId, ::std::string::String::new())
    }

    pub fn get_traceId(&self) -> &str {
        &self.traceId
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.traceId)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.traceId.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.traceId);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.traceId.is_empty() {
            os.write_string(1, &self.traceId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "traceId",
                    |m: &Request| { &m.traceId },
                    |m: &mut Request| { &mut m.traceId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Request>(
                    "Request",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Request {
        static mut instance: ::protobuf::lazy::Lazy<Request> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Request,
        };
        unsafe {
            instance.get(Request::new)
        }
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.clear_traceId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub errCode: i32,
    pub errMsg: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // int32 errCode = 1;

    pub fn clear_errCode(&mut self) {
        self.errCode = 0;
    }

    // Param is passed by value, moved
    pub fn set_errCode(&mut self, v: i32) {
        self.errCode = v;
    }

    pub fn get_errCode(&self) -> i32 {
        self.errCode
    }

    // string errMsg = 2;

    pub fn clear_errMsg(&mut self) {
        self.errMsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_errMsg(&mut self, v: ::std::string::String) {
        self.errMsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errMsg(&mut self) -> &mut ::std::string::String {
        &mut self.errMsg
    }

    // Take field
    pub fn take_errMsg(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errMsg, ::std::string::String::new())
    }

    pub fn get_errMsg(&self) -> &str {
        &self.errMsg
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.errCode = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errMsg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.errCode != 0 {
            my_size += ::protobuf::rt::value_size(1, self.errCode, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.errMsg.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errMsg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.errCode != 0 {
            os.write_int32(1, self.errCode)?;
        }
        if !self.errMsg.is_empty() {
            os.write_string(2, &self.errMsg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "errCode",
                    |m: &Response| { &m.errCode },
                    |m: &mut Response| { &mut m.errCode },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "errMsg",
                    |m: &Response| { &m.errMsg },
                    |m: &mut Response| { &mut m.errMsg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Response>(
                    "Response",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Response {
        static mut instance: ::protobuf::lazy::Lazy<Response> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Response,
        };
        unsafe {
            instance.get(Response::new)
        }
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.clear_errCode();
        self.clear_errMsg();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<Empty>(
                    "Empty",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Empty {
        static mut instance: ::protobuf::lazy::Lazy<Empty> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Empty,
        };
        unsafe {
            instance.get(Empty::new)
        }
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricInfoProto {
    // message fields
    pub metricInfo: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub diskMetrics: ::protobuf::RepeatedField<DiskMetricProto>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MetricInfoProto {
    pub fn new() -> MetricInfoProto {
        ::std::default::Default::default()
    }

    // repeated .MetricInfoProto.MetricInfoEntry metricInfo = 1;

    pub fn clear_metricInfo(&mut self) {
        self.metricInfo.clear();
    }

    // Param is passed by value, moved
    pub fn set_metricInfo(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metricInfo = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metricInfo(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metricInfo
    }

    // Take field
    pub fn take_metricInfo(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metricInfo, ::std::collections::HashMap::new())
    }

    pub fn get_metricInfo(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metricInfo
    }

    // repeated .DiskMetricProto diskMetrics = 2;

    pub fn clear_diskMetrics(&mut self) {
        self.diskMetrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_diskMetrics(&mut self, v: ::protobuf::RepeatedField<DiskMetricProto>) {
        self.diskMetrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_diskMetrics(&mut self) -> &mut ::protobuf::RepeatedField<DiskMetricProto> {
        &mut self.diskMetrics
    }

    // Take field
    pub fn take_diskMetrics(&mut self) -> ::protobuf::RepeatedField<DiskMetricProto> {
        ::std::mem::replace(&mut self.diskMetrics, ::protobuf::RepeatedField::new())
    }

    pub fn get_diskMetrics(&self) -> &[DiskMetricProto] {
        &self.diskMetrics
    }
}

impl ::protobuf::Message for MetricInfoProto {
    fn is_initialized(&self) -> bool {
        for v in &self.diskMetrics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metricInfo)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.diskMetrics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.metricInfo);
        for value in &self.diskMetrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.metricInfo, os)?;
        for v in &self.diskMetrics {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricInfoProto {
        MetricInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "metricInfo",
                    |m: &MetricInfoProto| { &m.metricInfo },
                    |m: &mut MetricInfoProto| { &mut m.metricInfo },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DiskMetricProto>>(
                    "diskMetrics",
                    |m: &MetricInfoProto| { &m.diskMetrics },
                    |m: &mut MetricInfoProto| { &mut m.diskMetrics },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricInfoProto>(
                    "MetricInfoProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricInfoProto {
        static mut instance: ::protobuf::lazy::Lazy<MetricInfoProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricInfoProto,
        };
        unsafe {
            instance.get(MetricInfoProto::new)
        }
    }
}

impl ::protobuf::Clear for MetricInfoProto {
    fn clear(&mut self) {
        self.clear_metricInfo();
        self.clear_diskMetrics();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServerMetricValue {
    // message fields
    pub serverId: i32,
    pub timestamp: i64,
    pub value: ::std::string::String,
    pub diskValue: ::protobuf::RepeatedField<DiskMetricProto>,
    pub nodeId: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ServerMetricValue {
    pub fn new() -> ServerMetricValue {
        ::std::default::Default::default()
    }

    // int32 serverId = 1;

    pub fn clear_serverId(&mut self) {
        self.serverId = 0;
    }

    // Param is passed by value, moved
    pub fn set_serverId(&mut self, v: i32) {
        self.serverId = v;
    }

    pub fn get_serverId(&self) -> i32 {
        self.serverId
    }

    // int64 timestamp = 2;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }

    // string value = 3;

    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    pub fn get_value(&self) -> &str {
        &self.value
    }

    // repeated .DiskMetricProto diskValue = 4;

    pub fn clear_diskValue(&mut self) {
        self.diskValue.clear();
    }

    // Param is passed by value, moved
    pub fn set_diskValue(&mut self, v: ::protobuf::RepeatedField<DiskMetricProto>) {
        self.diskValue = v;
    }

    // Mutable pointer to the field.
    pub fn mut_diskValue(&mut self) -> &mut ::protobuf::RepeatedField<DiskMetricProto> {
        &mut self.diskValue
    }

    // Take field
    pub fn take_diskValue(&mut self) -> ::protobuf::RepeatedField<DiskMetricProto> {
        ::std::mem::replace(&mut self.diskValue, ::protobuf::RepeatedField::new())
    }

    pub fn get_diskValue(&self) -> &[DiskMetricProto] {
        &self.diskValue
    }

    // int32 nodeId = 5;

    pub fn clear_nodeId(&mut self) {
        self.nodeId = 0;
    }

    // Param is passed by value, moved
    pub fn set_nodeId(&mut self, v: i32) {
        self.nodeId = v;
    }

    pub fn get_nodeId(&self) -> i32 {
        self.nodeId
    }
}

impl ::protobuf::Message for ServerMetricValue {
    fn is_initialized(&self) -> bool {
        for v in &self.diskValue {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.serverId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.diskValue)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.nodeId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.serverId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.serverId, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.value);
        }
        for value in &self.diskValue {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.nodeId != 0 {
            my_size += ::protobuf::rt::value_size(5, self.nodeId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.serverId != 0 {
            os.write_int32(1, self.serverId)?;
        }
        if self.timestamp != 0 {
            os.write_int64(2, self.timestamp)?;
        }
        if !self.value.is_empty() {
            os.write_string(3, &self.value)?;
        }
        for v in &self.diskValue {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.nodeId != 0 {
            os.write_int32(5, self.nodeId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerMetricValue {
        ServerMetricValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "serverId",
                    |m: &ServerMetricValue| { &m.serverId },
                    |m: &mut ServerMetricValue| { &mut m.serverId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "timestamp",
                    |m: &ServerMetricValue| { &m.timestamp },
                    |m: &mut ServerMetricValue| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "value",
                    |m: &ServerMetricValue| { &m.value },
                    |m: &mut ServerMetricValue| { &mut m.value },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DiskMetricProto>>(
                    "diskValue",
                    |m: &ServerMetricValue| { &m.diskValue },
                    |m: &mut ServerMetricValue| { &mut m.diskValue },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "nodeId",
                    |m: &ServerMetricValue| { &m.nodeId },
                    |m: &mut ServerMetricValue| { &mut m.nodeId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ServerMetricValue>(
                    "ServerMetricValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ServerMetricValue {
        static mut instance: ::protobuf::lazy::Lazy<ServerMetricValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ServerMetricValue,
        };
        unsafe {
            instance.get(ServerMetricValue::new)
        }
    }
}

impl ::protobuf::Clear for ServerMetricValue {
    fn clear(&mut self) {
        self.clear_serverId();
        self.clear_timestamp();
        self.clear_value();
        self.clear_diskValue();
        self.clear_nodeId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerMetricValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerMetricValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiskMetricProto {
    // message fields
    pub path: ::std::string::String,
    pub usage: i64,
    pub available: i64,
    pub total: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DiskMetricProto {
    pub fn new() -> DiskMetricProto {
        ::std::default::Default::default()
    }

    // string path = 1;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }

    // int64 usage = 2;

    pub fn clear_usage(&mut self) {
        self.usage = 0;
    }

    // Param is passed by value, moved
    pub fn set_usage(&mut self, v: i64) {
        self.usage = v;
    }

    pub fn get_usage(&self) -> i64 {
        self.usage
    }

    // int64 available = 3;

    pub fn clear_available(&mut self) {
        self.available = 0;
    }

    // Param is passed by value, moved
    pub fn set_available(&mut self, v: i64) {
        self.available = v;
    }

    pub fn get_available(&self) -> i64 {
        self.available
    }

    // int64 total = 4;

    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: i64) {
        self.total = v;
    }

    pub fn get_total(&self) -> i64 {
        self.total
    }
}

impl ::protobuf::Message for DiskMetricProto {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.usage = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.available = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.total = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if self.usage != 0 {
            my_size += ::protobuf::rt::value_size(2, self.usage, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.available != 0 {
            my_size += ::protobuf::rt::value_size(3, self.available, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if self.usage != 0 {
            os.write_int64(2, self.usage)?;
        }
        if self.available != 0 {
            os.write_int64(3, self.available)?;
        }
        if self.total != 0 {
            os.write_int64(4, self.total)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiskMetricProto {
        DiskMetricProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &DiskMetricProto| { &m.path },
                    |m: &mut DiskMetricProto| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "usage",
                    |m: &DiskMetricProto| { &m.usage },
                    |m: &mut DiskMetricProto| { &mut m.usage },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "available",
                    |m: &DiskMetricProto| { &m.available },
                    |m: &mut DiskMetricProto| { &mut m.available },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "total",
                    |m: &DiskMetricProto| { &m.total },
                    |m: &mut DiskMetricProto| { &mut m.total },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DiskMetricProto>(
                    "DiskMetricProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DiskMetricProto {
        static mut instance: ::protobuf::lazy::Lazy<DiskMetricProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DiskMetricProto,
        };
        unsafe {
            instance.get(DiskMetricProto::new)
        }
    }
}

impl ::protobuf::Clear for DiskMetricProto {
    fn clear(&mut self) {
        self.clear_path();
        self.clear_usage();
        self.clear_available();
        self.clear_total();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiskMetricProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiskMetricProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricInfoRequest {
    // message fields
    pub metricName: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MetricInfoRequest {
    pub fn new() -> MetricInfoRequest {
        ::std::default::Default::default()
    }

    // string metricName = 1;

    pub fn clear_metricName(&mut self) {
        self.metricName.clear();
    }

    // Param is passed by value, moved
    pub fn set_metricName(&mut self, v: ::std::string::String) {
        self.metricName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metricName(&mut self) -> &mut ::std::string::String {
        &mut self.metricName
    }

    // Take field
    pub fn take_metricName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metricName, ::std::string::String::new())
    }

    pub fn get_metricName(&self) -> &str {
        &self.metricName
    }
}

impl ::protobuf::Message for MetricInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metricName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metricName.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metricName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.metricName.is_empty() {
            os.write_string(1, &self.metricName)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricInfoRequest {
        MetricInfoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "metricName",
                    |m: &MetricInfoRequest| { &m.metricName },
                    |m: &mut MetricInfoRequest| { &mut m.metricName },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricInfoRequest>(
                    "MetricInfoRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricInfoRequest {
        static mut instance: ::protobuf::lazy::Lazy<MetricInfoRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricInfoRequest,
        };
        unsafe {
            instance.get(MetricInfoRequest::new)
        }
    }
}

impl ::protobuf::Clear for MetricInfoRequest {
    fn clear(&mut self) {
        self.clear_metricName();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricInfoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AllMetricsInfoResp {
    // message fields
    pub info: ::protobuf::RepeatedField<AllMetricsInfoProto>,
    pub resp: ::protobuf::SingularPtrField<Response>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AllMetricsInfoResp {
    pub fn new() -> AllMetricsInfoResp {
        ::std::default::Default::default()
    }

    // repeated .AllMetricsInfoProto info = 1;

    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: ::protobuf::RepeatedField<AllMetricsInfoProto>) {
        self.info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_info(&mut self) -> &mut ::protobuf::RepeatedField<AllMetricsInfoProto> {
        &mut self.info
    }

    // Take field
    pub fn take_info(&mut self) -> ::protobuf::RepeatedField<AllMetricsInfoProto> {
        ::std::mem::replace(&mut self.info, ::protobuf::RepeatedField::new())
    }

    pub fn get_info(&self) -> &[AllMetricsInfoProto] {
        &self.info
    }

    // .Response resp = 2;

    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> Response {
        self.resp.take().unwrap_or_else(|| Response::new())
    }

    pub fn get_resp(&self) -> &Response {
        self.resp.as_ref().unwrap_or_else(|| Response::default_instance())
    }
}

impl ::protobuf::Message for AllMetricsInfoResp {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.info {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AllMetricsInfoResp {
        AllMetricsInfoResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AllMetricsInfoProto>>(
                    "info",
                    |m: &AllMetricsInfoResp| { &m.info },
                    |m: &mut AllMetricsInfoResp| { &mut m.info },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Response>>(
                    "resp",
                    |m: &AllMetricsInfoResp| { &m.resp },
                    |m: &mut AllMetricsInfoResp| { &mut m.resp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AllMetricsInfoResp>(
                    "AllMetricsInfoResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AllMetricsInfoResp {
        static mut instance: ::protobuf::lazy::Lazy<AllMetricsInfoResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AllMetricsInfoResp,
        };
        unsafe {
            instance.get(AllMetricsInfoResp::new)
        }
    }
}

impl ::protobuf::Clear for AllMetricsInfoResp {
    fn clear(&mut self) {
        self.clear_info();
        self.clear_resp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllMetricsInfoResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllMetricsInfoResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AllMetricsInfoProto {
    // message fields
    pub metricName: ::std::string::String,
    pub values: ::protobuf::RepeatedField<ServerMetricValue>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AllMetricsInfoProto {
    pub fn new() -> AllMetricsInfoProto {
        ::std::default::Default::default()
    }

    // string metricName = 1;

    pub fn clear_metricName(&mut self) {
        self.metricName.clear();
    }

    // Param is passed by value, moved
    pub fn set_metricName(&mut self, v: ::std::string::String) {
        self.metricName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metricName(&mut self) -> &mut ::std::string::String {
        &mut self.metricName
    }

    // Take field
    pub fn take_metricName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metricName, ::std::string::String::new())
    }

    pub fn get_metricName(&self) -> &str {
        &self.metricName
    }

    // repeated .ServerMetricValue values = 2;

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<ServerMetricValue>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<ServerMetricValue> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<ServerMetricValue> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    pub fn get_values(&self) -> &[ServerMetricValue] {
        &self.values
    }
}

impl ::protobuf::Message for AllMetricsInfoProto {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metricName)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metricName.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metricName);
        }
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.metricName.is_empty() {
            os.write_string(1, &self.metricName)?;
        }
        for v in &self.values {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AllMetricsInfoProto {
        AllMetricsInfoProto::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "metricName",
                    |m: &AllMetricsInfoProto| { &m.metricName },
                    |m: &mut AllMetricsInfoProto| { &mut m.metricName },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServerMetricValue>>(
                    "values",
                    |m: &AllMetricsInfoProto| { &m.values },
                    |m: &mut AllMetricsInfoProto| { &mut m.values },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AllMetricsInfoProto>(
                    "AllMetricsInfoProto",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AllMetricsInfoProto {
        static mut instance: ::protobuf::lazy::Lazy<AllMetricsInfoProto> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AllMetricsInfoProto,
        };
        unsafe {
            instance.get(AllMetricsInfoProto::new)
        }
    }
}

impl ::protobuf::Clear for AllMetricsInfoProto {
    fn clear(&mut self) {
        self.clear_metricName();
        self.clear_values();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AllMetricsInfoProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AllMetricsInfoProto {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetricInfoResp {
    // message fields
    pub values: ::protobuf::RepeatedField<ServerMetricValue>,
    pub resp: ::protobuf::SingularPtrField<Response>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl MetricInfoResp {
    pub fn new() -> MetricInfoResp {
        ::std::default::Default::default()
    }

    // repeated .ServerMetricValue values = 1;

    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<ServerMetricValue>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<ServerMetricValue> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<ServerMetricValue> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }

    pub fn get_values(&self) -> &[ServerMetricValue] {
        &self.values
    }

    // .Response resp = 2;

    pub fn clear_resp(&mut self) {
        self.resp.clear();
    }

    pub fn has_resp(&self) -> bool {
        self.resp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resp(&mut self, v: Response) {
        self.resp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resp(&mut self) -> &mut Response {
        if self.resp.is_none() {
            self.resp.set_default();
        }
        self.resp.as_mut().unwrap()
    }

    // Take field
    pub fn take_resp(&mut self) -> Response {
        self.resp.take().unwrap_or_else(|| Response::new())
    }

    pub fn get_resp(&self) -> &Response {
        self.resp.as_ref().unwrap_or_else(|| Response::default_instance())
    }
}

impl ::protobuf::Message for MetricInfoResp {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.resp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.resp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetricInfoResp {
        MetricInfoResp::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServerMetricValue>>(
                    "values",
                    |m: &MetricInfoResp| { &m.values },
                    |m: &mut MetricInfoResp| { &mut m.values },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Response>>(
                    "resp",
                    |m: &MetricInfoResp| { &m.resp },
                    |m: &mut MetricInfoResp| { &mut m.resp },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MetricInfoResp>(
                    "MetricInfoResp",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MetricInfoResp {
        static mut instance: ::protobuf::lazy::Lazy<MetricInfoResp> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MetricInfoResp,
        };
        unsafe {
            instance.get(MetricInfoResp::new)
        }
    }
}

impl ::protobuf::Clear for MetricInfoResp {
    fn clear(&mut self) {
        self.clear_values();
        self.clear_resp();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetricInfoResp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetricInfoResp {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OperationType {
    INSERT_OVERWRITE_VERTEX = 0,
    INSERT_OVERWRITE_VERTEX_PROPERTY = 1,
    DELETE_VERTEX = 2,
    INSERT_OVERWRITE_EDGE = 3,
    INSERT_OVERWRITE_EDGE_PROPERTY = 4,
    DELETE_EDGE = 5,
    BARRIER_MARKER = 6,
    INSERT_REPLACE_VERTEX = 7,
    INSERT_REPLACE_EDGE = 8,
}

impl ::protobuf::ProtobufEnum for OperationType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OperationType> {
        match value {
            0 => ::std::option::Option::Some(OperationType::INSERT_OVERWRITE_VERTEX),
            1 => ::std::option::Option::Some(OperationType::INSERT_OVERWRITE_VERTEX_PROPERTY),
            2 => ::std::option::Option::Some(OperationType::DELETE_VERTEX),
            3 => ::std::option::Option::Some(OperationType::INSERT_OVERWRITE_EDGE),
            4 => ::std::option::Option::Some(OperationType::INSERT_OVERWRITE_EDGE_PROPERTY),
            5 => ::std::option::Option::Some(OperationType::DELETE_EDGE),
            6 => ::std::option::Option::Some(OperationType::BARRIER_MARKER),
            7 => ::std::option::Option::Some(OperationType::INSERT_REPLACE_VERTEX),
            8 => ::std::option::Option::Some(OperationType::INSERT_REPLACE_EDGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OperationType] = &[
            OperationType::INSERT_OVERWRITE_VERTEX,
            OperationType::INSERT_OVERWRITE_VERTEX_PROPERTY,
            OperationType::DELETE_VERTEX,
            OperationType::INSERT_OVERWRITE_EDGE,
            OperationType::INSERT_OVERWRITE_EDGE_PROPERTY,
            OperationType::DELETE_EDGE,
            OperationType::BARRIER_MARKER,
            OperationType::INSERT_REPLACE_VERTEX,
            OperationType::INSERT_REPLACE_EDGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("OperationType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for OperationType {
}

impl ::std::default::Default for OperationType {
    fn default() -> Self {
        OperationType::INSERT_OVERWRITE_VERTEX
    }
}

impl ::protobuf::reflect::ProtobufValue for OperationType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10sdk/common.proto\"\xbf\x01\n\rEndpointProto\x12\x12\n\x04host\x18\
    \x01\x20\x01(\tR\x04host\x12\x12\n\x04port\x18\x02\x20\x01(\x05R\x04port\
    \x12,\n\x11gremlinServerPort\x18\x03\x20\x01(\x05R\x11gremlinServerPort\
    \x12\x20\n\x0bruntimePort\x18\x04\x20\x01(\x05R\x0bruntimePort\x126\n\
    \x16runtimCtrlAndAsyncPort\x18\x05\x20\x01(\x05R\x16runtimCtrlAndAsyncPo\
    rt\"#\n\x07Request\x12\x18\n\x07traceId\x18\x01\x20\x01(\tR\x07traceId\"\
    <\n\x08Response\x12\x18\n\x07errCode\x18\x01\x20\x01(\x05R\x07errCode\
    \x12\x16\n\x06errMsg\x18\x02\x20\x01(\tR\x06errMsg\"\x07\n\x05Empty\"\
    \xc6\x01\n\x0fMetricInfoProto\x12@\n\nmetricInfo\x18\x01\x20\x03(\x0b2\
    \x20.MetricInfoProto.MetricInfoEntryR\nmetricInfo\x122\n\x0bdiskMetrics\
    \x18\x02\x20\x03(\x0b2\x10.DiskMetricProtoR\x0bdiskMetrics\x1a=\n\x0fMet\
    ricInfoEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05va\
    lue\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xab\x01\n\x11ServerMetricVa\
    lue\x12\x1a\n\x08serverId\x18\x01\x20\x01(\x05R\x08serverId\x12\x1c\n\tt\
    imestamp\x18\x02\x20\x01(\x03R\ttimestamp\x12\x14\n\x05value\x18\x03\x20\
    \x01(\tR\x05value\x12.\n\tdiskValue\x18\x04\x20\x03(\x0b2\x10.DiskMetric\
    ProtoR\tdiskValue\x12\x16\n\x06nodeId\x18\x05\x20\x01(\x05R\x06nodeId\"o\
    \n\x0fDiskMetricProto\x12\x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12\
    \x14\n\x05usage\x18\x02\x20\x01(\x03R\x05usage\x12\x1c\n\tavailable\x18\
    \x03\x20\x01(\x03R\tavailable\x12\x14\n\x05total\x18\x04\x20\x01(\x03R\
    \x05total\"3\n\x11MetricInfoRequest\x12\x1e\n\nmetricName\x18\x01\x20\
    \x01(\tR\nmetricName\"]\n\x12AllMetricsInfoResp\x12(\n\x04info\x18\x01\
    \x20\x03(\x0b2\x14.AllMetricsInfoProtoR\x04info\x12\x1d\n\x04resp\x18\
    \x02\x20\x01(\x0b2\t.ResponseR\x04resp\"a\n\x13AllMetricsInfoProto\x12\
    \x1e\n\nmetricName\x18\x01\x20\x01(\tR\nmetricName\x12*\n\x06values\x18\
    \x02\x20\x03(\x0b2\x12.ServerMetricValueR\x06values\"[\n\x0eMetricInfoRe\
    sp\x12*\n\x06values\x18\x01\x20\x03(\x0b2\x12.ServerMetricValueR\x06valu\
    es\x12\x1d\n\x04resp\x18\x02\x20\x01(\x0b2\t.ResponseR\x04resp*\xfd\x01\
    \n\rOperationType\x12\x1b\n\x17INSERT_OVERWRITE_VERTEX\x10\0\x12$\n\x20I\
    NSERT_OVERWRITE_VERTEX_PROPERTY\x10\x01\x12\x11\n\rDELETE_VERTEX\x10\x02\
    \x12\x19\n\x15INSERT_OVERWRITE_EDGE\x10\x03\x12\"\n\x1eINSERT_OVERWRITE_\
    EDGE_PROPERTY\x10\x04\x12\x0f\n\x0bDELETE_EDGE\x10\x05\x12\x12\n\x0eBARR\
    IER_MARKER\x10\x06\x12\x19\n\x15INSERT_REPLACE_VERTEX\x10\x07\x12\x17\n\
    \x13INSERT_REPLACE_EDGE\x10\x08B1\n\x1acom.alibaba.maxgraph.protoB\x0bCo\
    mmonProtoP\x01\xa0\x01\x01\x88\x01\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
