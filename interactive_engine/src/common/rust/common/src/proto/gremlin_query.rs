//
//! Copyright 2020 Alibaba Group Holding Limited.
//! 
//! Licensed under the Apache License, Version 2.0 (the "License");
//! you may not use this file except in compliance with the License.
//! You may obtain a copy of the License at
//! 
//!     http://www.apache.org/licenses/LICENSE-2.0
//! 
//! Unless required by applicable law or agreed to in writing, software
//! distributed under the License is distributed on an "AS IS" BASIS,
//! WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//! See the License for the specific language governing permissions and
//! limitations under the License.

// This file is generated by rust-protobuf 2.0.6. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct VertexScanRequest {
    // message fields
    pub typeId: i32,
    pub order: bool,
    pub orderKey: ::std::string::String,
    pub limit: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VertexScanRequest {
    pub fn new() -> VertexScanRequest {
        ::std::default::Default::default()
    }

    // int32 typeId = 1;

    pub fn clear_typeId(&mut self) {
        self.typeId = 0;
    }

    // Param is passed by value, moved
    pub fn set_typeId(&mut self, v: i32) {
        self.typeId = v;
    }

    pub fn get_typeId(&self) -> i32 {
        self.typeId
    }

    // bool order = 2;

    pub fn clear_order(&mut self) {
        self.order = false;
    }

    // Param is passed by value, moved
    pub fn set_order(&mut self, v: bool) {
        self.order = v;
    }

    pub fn get_order(&self) -> bool {
        self.order
    }

    // string orderKey = 3;

    pub fn clear_orderKey(&mut self) {
        self.orderKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_orderKey(&mut self, v: ::std::string::String) {
        self.orderKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orderKey(&mut self) -> &mut ::std::string::String {
        &mut self.orderKey
    }

    // Take field
    pub fn take_orderKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orderKey, ::std::string::String::new())
    }

    pub fn get_orderKey(&self) -> &str {
        &self.orderKey
    }

    // int32 limit = 4;

    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = v;
    }

    pub fn get_limit(&self) -> i32 {
        self.limit
    }
}

impl ::protobuf::Message for VertexScanRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.typeId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.order = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orderKey)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.typeId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.typeId, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.order != false {
            my_size += 2;
        }
        if !self.orderKey.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.orderKey);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.typeId != 0 {
            os.write_int32(1, self.typeId)?;
        }
        if self.order != false {
            os.write_bool(2, self.order)?;
        }
        if !self.orderKey.is_empty() {
            os.write_string(3, &self.orderKey)?;
        }
        if self.limit != 0 {
            os.write_int32(4, self.limit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VertexScanRequest {
        VertexScanRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "typeId",
                    |m: &VertexScanRequest| { &m.typeId },
                    |m: &mut VertexScanRequest| { &mut m.typeId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "order",
                    |m: &VertexScanRequest| { &m.order },
                    |m: &mut VertexScanRequest| { &mut m.order },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "orderKey",
                    |m: &VertexScanRequest| { &m.orderKey },
                    |m: &mut VertexScanRequest| { &mut m.orderKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "limit",
                    |m: &VertexScanRequest| { &m.limit },
                    |m: &mut VertexScanRequest| { &mut m.limit },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VertexScanRequest>(
                    "VertexScanRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VertexScanRequest {
        static mut instance: ::protobuf::lazy::Lazy<VertexScanRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VertexScanRequest,
        };
        unsafe {
            instance.get(VertexScanRequest::new)
        }
    }
}

impl ::protobuf::Clear for VertexScanRequest {
    fn clear(&mut self) {
        self.clear_typeId();
        self.clear_order();
        self.clear_orderKey();
        self.clear_limit();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VertexScanRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VertexScanRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VertexId {
    // message fields
    pub id: i64,
    pub typeId: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VertexId {
    pub fn new() -> VertexId {
        ::std::default::Default::default()
    }

    // int64 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    pub fn get_id(&self) -> i64 {
        self.id
    }

    // int32 typeId = 2;

    pub fn clear_typeId(&mut self) {
        self.typeId = 0;
    }

    // Param is passed by value, moved
    pub fn set_typeId(&mut self, v: i32) {
        self.typeId = v;
    }

    pub fn get_typeId(&self) -> i32 {
        self.typeId
    }
}

impl ::protobuf::Message for VertexId {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.typeId = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.typeId != 0 {
            my_size += ::protobuf::rt::value_size(2, self.typeId, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if self.typeId != 0 {
            os.write_int32(2, self.typeId)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VertexId {
        VertexId::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "id",
                    |m: &VertexId| { &m.id },
                    |m: &mut VertexId| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "typeId",
                    |m: &VertexId| { &m.typeId },
                    |m: &mut VertexId| { &mut m.typeId },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VertexId>(
                    "VertexId",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VertexId {
        static mut instance: ::protobuf::lazy::Lazy<VertexId> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VertexId,
        };
        unsafe {
            instance.get(VertexId::new)
        }
    }
}

impl ::protobuf::Clear for VertexId {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_typeId();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VertexId {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VertexId {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VertexRequest {
    // message fields
    pub ids: ::protobuf::RepeatedField<VertexId>,
    pub order: bool,
    pub orderKey: ::std::string::String,
    pub limit: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VertexRequest {
    pub fn new() -> VertexRequest {
        ::std::default::Default::default()
    }

    // repeated .tinkerpop.VertexId ids = 1;

    pub fn clear_ids(&mut self) {
        self.ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_ids(&mut self, v: ::protobuf::RepeatedField<VertexId>) {
        self.ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ids(&mut self) -> &mut ::protobuf::RepeatedField<VertexId> {
        &mut self.ids
    }

    // Take field
    pub fn take_ids(&mut self) -> ::protobuf::RepeatedField<VertexId> {
        ::std::mem::replace(&mut self.ids, ::protobuf::RepeatedField::new())
    }

    pub fn get_ids(&self) -> &[VertexId] {
        &self.ids
    }

    // bool order = 2;

    pub fn clear_order(&mut self) {
        self.order = false;
    }

    // Param is passed by value, moved
    pub fn set_order(&mut self, v: bool) {
        self.order = v;
    }

    pub fn get_order(&self) -> bool {
        self.order
    }

    // string orderKey = 3;

    pub fn clear_orderKey(&mut self) {
        self.orderKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_orderKey(&mut self, v: ::std::string::String) {
        self.orderKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orderKey(&mut self) -> &mut ::std::string::String {
        &mut self.orderKey
    }

    // Take field
    pub fn take_orderKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orderKey, ::std::string::String::new())
    }

    pub fn get_orderKey(&self) -> &str {
        &self.orderKey
    }

    // int32 limit = 4;

    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = v;
    }

    pub fn get_limit(&self) -> i32 {
        self.limit
    }
}

impl ::protobuf::Message for VertexRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.ids {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ids)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.order = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orderKey)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.order != false {
            my_size += 2;
        }
        if !self.orderKey.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.orderKey);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ids {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.order != false {
            os.write_bool(2, self.order)?;
        }
        if !self.orderKey.is_empty() {
            os.write_string(3, &self.orderKey)?;
        }
        if self.limit != 0 {
            os.write_int32(4, self.limit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VertexRequest {
        VertexRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VertexId>>(
                    "ids",
                    |m: &VertexRequest| { &m.ids },
                    |m: &mut VertexRequest| { &mut m.ids },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "order",
                    |m: &VertexRequest| { &m.order },
                    |m: &mut VertexRequest| { &mut m.order },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "orderKey",
                    |m: &VertexRequest| { &m.orderKey },
                    |m: &mut VertexRequest| { &mut m.orderKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "limit",
                    |m: &VertexRequest| { &m.limit },
                    |m: &mut VertexRequest| { &mut m.limit },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VertexRequest>(
                    "VertexRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VertexRequest {
        static mut instance: ::protobuf::lazy::Lazy<VertexRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VertexRequest,
        };
        unsafe {
            instance.get(VertexRequest::new)
        }
    }
}

impl ::protobuf::Clear for VertexRequest {
    fn clear(&mut self) {
        self.clear_ids();
        self.clear_order();
        self.clear_orderKey();
        self.clear_limit();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VertexRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VertexRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VertexResponse {
    // message fields
    pub id: ::protobuf::SingularPtrField<VertexId>,
    pub pros: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl VertexResponse {
    pub fn new() -> VertexResponse {
        ::std::default::Default::default()
    }

    // .tinkerpop.VertexId id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: VertexId) {
        self.id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut VertexId {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> VertexId {
        self.id.take().unwrap_or_else(|| VertexId::new())
    }

    pub fn get_id(&self) -> &VertexId {
        self.id.as_ref().unwrap_or_else(|| VertexId::default_instance())
    }

    // bytes pros = 2;

    pub fn clear_pros(&mut self) {
        self.pros.clear();
    }

    // Param is passed by value, moved
    pub fn set_pros(&mut self, v: ::std::vec::Vec<u8>) {
        self.pros = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pros(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.pros
    }

    // Take field
    pub fn take_pros(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.pros, ::std::vec::Vec::new())
    }

    pub fn get_pros(&self) -> &[u8] {
        &self.pros
    }
}

impl ::protobuf::Message for VertexResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.pros)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.pros.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.pros);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.pros.is_empty() {
            os.write_bytes(2, &self.pros)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VertexResponse {
        VertexResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VertexId>>(
                    "id",
                    |m: &VertexResponse| { &m.id },
                    |m: &mut VertexResponse| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pros",
                    |m: &VertexResponse| { &m.pros },
                    |m: &mut VertexResponse| { &mut m.pros },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VertexResponse>(
                    "VertexResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VertexResponse {
        static mut instance: ::protobuf::lazy::Lazy<VertexResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VertexResponse,
        };
        unsafe {
            instance.get(VertexResponse::new)
        }
    }
}

impl ::protobuf::Clear for VertexResponse {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_pros();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VertexResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VertexResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EdgesRequest {
    // message fields
    pub srcId: ::std::vec::Vec<i64>,
    pub d: bool,
    pub label: ::protobuf::RepeatedField<::std::string::String>,
    pub idOnly: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EdgesRequest {
    pub fn new() -> EdgesRequest {
        ::std::default::Default::default()
    }

    // repeated int64 srcId = 1;

    pub fn clear_srcId(&mut self) {
        self.srcId.clear();
    }

    // Param is passed by value, moved
    pub fn set_srcId(&mut self, v: ::std::vec::Vec<i64>) {
        self.srcId = v;
    }

    // Mutable pointer to the field.
    pub fn mut_srcId(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.srcId
    }

    // Take field
    pub fn take_srcId(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.srcId, ::std::vec::Vec::new())
    }

    pub fn get_srcId(&self) -> &[i64] {
        &self.srcId
    }

    // bool d = 2;

    pub fn clear_d(&mut self) {
        self.d = false;
    }

    // Param is passed by value, moved
    pub fn set_d(&mut self, v: bool) {
        self.d = v;
    }

    pub fn get_d(&self) -> bool {
        self.d
    }

    // repeated string label = 3;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.label = v;
    }

    // Mutable pointer to the field.
    pub fn mut_label(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.label, ::protobuf::RepeatedField::new())
    }

    pub fn get_label(&self) -> &[::std::string::String] {
        &self.label
    }

    // bool idOnly = 4;

    pub fn clear_idOnly(&mut self) {
        self.idOnly = false;
    }

    // Param is passed by value, moved
    pub fn set_idOnly(&mut self, v: bool) {
        self.idOnly = v;
    }

    pub fn get_idOnly(&self) -> bool {
        self.idOnly
    }
}

impl ::protobuf::Message for EdgesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.srcId)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.d = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.label)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.idOnly = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.srcId {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.d != false {
            my_size += 2;
        }
        for value in &self.label {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.idOnly != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.srcId {
            os.write_int64(1, *v)?;
        };
        if self.d != false {
            os.write_bool(2, self.d)?;
        }
        for v in &self.label {
            os.write_string(3, &v)?;
        };
        if self.idOnly != false {
            os.write_bool(4, self.idOnly)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EdgesRequest {
        EdgesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "srcId",
                    |m: &EdgesRequest| { &m.srcId },
                    |m: &mut EdgesRequest| { &mut m.srcId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "d",
                    |m: &EdgesRequest| { &m.d },
                    |m: &mut EdgesRequest| { &mut m.d },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &EdgesRequest| { &m.label },
                    |m: &mut EdgesRequest| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "idOnly",
                    |m: &EdgesRequest| { &m.idOnly },
                    |m: &mut EdgesRequest| { &mut m.idOnly },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EdgesRequest>(
                    "EdgesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EdgesRequest {
        static mut instance: ::protobuf::lazy::Lazy<EdgesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EdgesRequest,
        };
        unsafe {
            instance.get(EdgesRequest::new)
        }
    }
}

impl ::protobuf::Clear for EdgesRequest {
    fn clear(&mut self) {
        self.clear_srcId();
        self.clear_d();
        self.clear_label();
        self.clear_idOnly();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EdgesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EdgesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EdgesReponse {
    // message fields
    pub size: i32,
    pub srcid: i64,
    pub label: ::std::string::String,
    pub dstids: ::protobuf::RepeatedField<VertexId>,
    pub pros: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl EdgesReponse {
    pub fn new() -> EdgesReponse {
        ::std::default::Default::default()
    }

    // int32 size = 1;

    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i32) {
        self.size = v;
    }

    pub fn get_size(&self) -> i32 {
        self.size
    }

    // int64 srcid = 2;

    pub fn clear_srcid(&mut self) {
        self.srcid = 0;
    }

    // Param is passed by value, moved
    pub fn set_srcid(&mut self, v: i64) {
        self.srcid = v;
    }

    pub fn get_srcid(&self) -> i64 {
        self.srcid
    }

    // string label = 3;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // repeated .tinkerpop.VertexId dstids = 4;

    pub fn clear_dstids(&mut self) {
        self.dstids.clear();
    }

    // Param is passed by value, moved
    pub fn set_dstids(&mut self, v: ::protobuf::RepeatedField<VertexId>) {
        self.dstids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dstids(&mut self) -> &mut ::protobuf::RepeatedField<VertexId> {
        &mut self.dstids
    }

    // Take field
    pub fn take_dstids(&mut self) -> ::protobuf::RepeatedField<VertexId> {
        ::std::mem::replace(&mut self.dstids, ::protobuf::RepeatedField::new())
    }

    pub fn get_dstids(&self) -> &[VertexId] {
        &self.dstids
    }

    // repeated bytes pros = 5;

    pub fn clear_pros(&mut self) {
        self.pros.clear();
    }

    // Param is passed by value, moved
    pub fn set_pros(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.pros = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pros(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.pros
    }

    // Take field
    pub fn take_pros(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.pros, ::protobuf::RepeatedField::new())
    }

    pub fn get_pros(&self) -> &[::std::vec::Vec<u8>] {
        &self.pros
    }
}

impl ::protobuf::Message for EdgesReponse {
    fn is_initialized(&self) -> bool {
        for v in &self.dstids {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.size = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.srcid = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dstids)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.pros)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(1, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.srcid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.srcid, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.label);
        }
        for value in &self.dstids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pros {
            my_size += ::protobuf::rt::bytes_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.size != 0 {
            os.write_int32(1, self.size)?;
        }
        if self.srcid != 0 {
            os.write_int64(2, self.srcid)?;
        }
        if !self.label.is_empty() {
            os.write_string(3, &self.label)?;
        }
        for v in &self.dstids {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pros {
            os.write_bytes(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EdgesReponse {
        EdgesReponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "size",
                    |m: &EdgesReponse| { &m.size },
                    |m: &mut EdgesReponse| { &mut m.size },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "srcid",
                    |m: &EdgesReponse| { &m.srcid },
                    |m: &mut EdgesReponse| { &mut m.srcid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &EdgesReponse| { &m.label },
                    |m: &mut EdgesReponse| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VertexId>>(
                    "dstids",
                    |m: &EdgesReponse| { &m.dstids },
                    |m: &mut EdgesReponse| { &mut m.dstids },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pros",
                    |m: &EdgesReponse| { &m.pros },
                    |m: &mut EdgesReponse| { &mut m.pros },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<EdgesReponse>(
                    "EdgesReponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EdgesReponse {
        static mut instance: ::protobuf::lazy::Lazy<EdgesReponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const EdgesReponse,
        };
        unsafe {
            instance.get(EdgesReponse::new)
        }
    }
}

impl ::protobuf::Clear for EdgesReponse {
    fn clear(&mut self) {
        self.clear_size();
        self.clear_srcid();
        self.clear_label();
        self.clear_dstids();
        self.clear_pros();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EdgesReponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EdgesReponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LimitEdgeRequest {
    // message fields
    pub req: ::protobuf::SingularPtrField<EdgesRequest>,
    pub order: bool,
    pub orderKey: ::protobuf::RepeatedField<::std::string::String>,
    pub limit: i32,
    pub idOnly: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LimitEdgeRequest {
    pub fn new() -> LimitEdgeRequest {
        ::std::default::Default::default()
    }

    // .tinkerpop.EdgesRequest req = 1;

    pub fn clear_req(&mut self) {
        self.req.clear();
    }

    pub fn has_req(&self) -> bool {
        self.req.is_some()
    }

    // Param is passed by value, moved
    pub fn set_req(&mut self, v: EdgesRequest) {
        self.req = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_req(&mut self) -> &mut EdgesRequest {
        if self.req.is_none() {
            self.req.set_default();
        }
        self.req.as_mut().unwrap()
    }

    // Take field
    pub fn take_req(&mut self) -> EdgesRequest {
        self.req.take().unwrap_or_else(|| EdgesRequest::new())
    }

    pub fn get_req(&self) -> &EdgesRequest {
        self.req.as_ref().unwrap_or_else(|| EdgesRequest::default_instance())
    }

    // bool order = 2;

    pub fn clear_order(&mut self) {
        self.order = false;
    }

    // Param is passed by value, moved
    pub fn set_order(&mut self, v: bool) {
        self.order = v;
    }

    pub fn get_order(&self) -> bool {
        self.order
    }

    // repeated string orderKey = 3;

    pub fn clear_orderKey(&mut self) {
        self.orderKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_orderKey(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.orderKey = v;
    }

    // Mutable pointer to the field.
    pub fn mut_orderKey(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.orderKey
    }

    // Take field
    pub fn take_orderKey(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.orderKey, ::protobuf::RepeatedField::new())
    }

    pub fn get_orderKey(&self) -> &[::std::string::String] {
        &self.orderKey
    }

    // int32 limit = 4;

    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: i32) {
        self.limit = v;
    }

    pub fn get_limit(&self) -> i32 {
        self.limit
    }

    // bool idOnly = 5;

    pub fn clear_idOnly(&mut self) {
        self.idOnly = false;
    }

    // Param is passed by value, moved
    pub fn set_idOnly(&mut self, v: bool) {
        self.idOnly = v;
    }

    pub fn get_idOnly(&self) -> bool {
        self.idOnly
    }
}

impl ::protobuf::Message for LimitEdgeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.req {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.req)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.order = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.orderKey)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.limit = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.idOnly = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.req.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.order != false {
            my_size += 2;
        }
        for value in &self.orderKey {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(4, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.idOnly != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.req.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.order != false {
            os.write_bool(2, self.order)?;
        }
        for v in &self.orderKey {
            os.write_string(3, &v)?;
        };
        if self.limit != 0 {
            os.write_int32(4, self.limit)?;
        }
        if self.idOnly != false {
            os.write_bool(5, self.idOnly)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LimitEdgeRequest {
        LimitEdgeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EdgesRequest>>(
                    "req",
                    |m: &LimitEdgeRequest| { &m.req },
                    |m: &mut LimitEdgeRequest| { &mut m.req },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "order",
                    |m: &LimitEdgeRequest| { &m.order },
                    |m: &mut LimitEdgeRequest| { &mut m.order },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "orderKey",
                    |m: &LimitEdgeRequest| { &m.orderKey },
                    |m: &mut LimitEdgeRequest| { &mut m.orderKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "limit",
                    |m: &LimitEdgeRequest| { &m.limit },
                    |m: &mut LimitEdgeRequest| { &mut m.limit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "idOnly",
                    |m: &LimitEdgeRequest| { &m.idOnly },
                    |m: &mut LimitEdgeRequest| { &mut m.idOnly },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LimitEdgeRequest>(
                    "LimitEdgeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LimitEdgeRequest {
        static mut instance: ::protobuf::lazy::Lazy<LimitEdgeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LimitEdgeRequest,
        };
        unsafe {
            instance.get(LimitEdgeRequest::new)
        }
    }
}

impl ::protobuf::Clear for LimitEdgeRequest {
    fn clear(&mut self) {
        self.clear_req();
        self.clear_order();
        self.clear_orderKey();
        self.clear_limit();
        self.clear_idOnly();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LimitEdgeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LimitEdgeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LimitEdgesReponse {
    // message fields
    pub source: ::protobuf::SingularPtrField<VertexId>,
    pub destin: ::protobuf::SingularPtrField<VertexId>,
    pub typeId: i32,
    pub pros: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LimitEdgesReponse {
    pub fn new() -> LimitEdgesReponse {
        ::std::default::Default::default()
    }

    // .tinkerpop.VertexId source = 1;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: VertexId) {
        self.source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut VertexId {
        if self.source.is_none() {
            self.source.set_default();
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> VertexId {
        self.source.take().unwrap_or_else(|| VertexId::new())
    }

    pub fn get_source(&self) -> &VertexId {
        self.source.as_ref().unwrap_or_else(|| VertexId::default_instance())
    }

    // .tinkerpop.VertexId destin = 2;

    pub fn clear_destin(&mut self) {
        self.destin.clear();
    }

    pub fn has_destin(&self) -> bool {
        self.destin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destin(&mut self, v: VertexId) {
        self.destin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destin(&mut self) -> &mut VertexId {
        if self.destin.is_none() {
            self.destin.set_default();
        }
        self.destin.as_mut().unwrap()
    }

    // Take field
    pub fn take_destin(&mut self) -> VertexId {
        self.destin.take().unwrap_or_else(|| VertexId::new())
    }

    pub fn get_destin(&self) -> &VertexId {
        self.destin.as_ref().unwrap_or_else(|| VertexId::default_instance())
    }

    // int32 typeId = 3;

    pub fn clear_typeId(&mut self) {
        self.typeId = 0;
    }

    // Param is passed by value, moved
    pub fn set_typeId(&mut self, v: i32) {
        self.typeId = v;
    }

    pub fn get_typeId(&self) -> i32 {
        self.typeId
    }

    // bytes pros = 4;

    pub fn clear_pros(&mut self) {
        self.pros.clear();
    }

    // Param is passed by value, moved
    pub fn set_pros(&mut self, v: ::std::vec::Vec<u8>) {
        self.pros = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pros(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.pros
    }

    // Take field
    pub fn take_pros(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.pros, ::std::vec::Vec::new())
    }

    pub fn get_pros(&self) -> &[u8] {
        &self.pros
    }
}

impl ::protobuf::Message for LimitEdgesReponse {
    fn is_initialized(&self) -> bool {
        for v in &self.source {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destin {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.destin)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.typeId = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.pros)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.destin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.typeId != 0 {
            my_size += ::protobuf::rt::value_size(3, self.typeId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.pros.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.pros);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.destin.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.typeId != 0 {
            os.write_int32(3, self.typeId)?;
        }
        if !self.pros.is_empty() {
            os.write_bytes(4, &self.pros)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LimitEdgesReponse {
        LimitEdgesReponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VertexId>>(
                    "source",
                    |m: &LimitEdgesReponse| { &m.source },
                    |m: &mut LimitEdgesReponse| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VertexId>>(
                    "destin",
                    |m: &LimitEdgesReponse| { &m.destin },
                    |m: &mut LimitEdgesReponse| { &mut m.destin },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "typeId",
                    |m: &LimitEdgesReponse| { &m.typeId },
                    |m: &mut LimitEdgesReponse| { &mut m.typeId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "pros",
                    |m: &LimitEdgesReponse| { &m.pros },
                    |m: &mut LimitEdgesReponse| { &mut m.pros },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LimitEdgesReponse>(
                    "LimitEdgesReponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LimitEdgesReponse {
        static mut instance: ::protobuf::lazy::Lazy<LimitEdgesReponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LimitEdgesReponse,
        };
        unsafe {
            instance.get(LimitEdgesReponse::new)
        }
    }
}

impl ::protobuf::Clear for LimitEdgesReponse {
    fn clear(&mut self) {
        self.clear_source();
        self.clear_destin();
        self.clear_typeId();
        self.clear_pros();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LimitEdgesReponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LimitEdgesReponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gremlin_query.proto\x12\ttinkerpop\"s\n\x11VertexScanRequest\x12\
    \x16\n\x06typeId\x18\x01\x20\x01(\x05R\x06typeId\x12\x14\n\x05order\x18\
    \x02\x20\x01(\x08R\x05order\x12\x1a\n\x08orderKey\x18\x03\x20\x01(\tR\
    \x08orderKey\x12\x14\n\x05limit\x18\x04\x20\x01(\x05R\x05limit\"2\n\x08V\
    ertexId\x12\x0e\n\x02id\x18\x01\x20\x01(\x03R\x02id\x12\x16\n\x06typeId\
    \x18\x02\x20\x01(\x05R\x06typeId\"~\n\rVertexRequest\x12%\n\x03ids\x18\
    \x01\x20\x03(\x0b2\x13.tinkerpop.VertexIdR\x03ids\x12\x14\n\x05order\x18\
    \x02\x20\x01(\x08R\x05order\x12\x1a\n\x08orderKey\x18\x03\x20\x01(\tR\
    \x08orderKey\x12\x14\n\x05limit\x18\x04\x20\x01(\x05R\x05limit\"I\n\x0eV\
    ertexResponse\x12#\n\x02id\x18\x01\x20\x01(\x0b2\x13.tinkerpop.VertexIdR\
    \x02id\x12\x12\n\x04pros\x18\x02\x20\x01(\x0cR\x04pros\"`\n\x0cEdgesRequ\
    est\x12\x14\n\x05srcId\x18\x01\x20\x03(\x03R\x05srcId\x12\x0c\n\x01d\x18\
    \x02\x20\x01(\x08R\x01d\x12\x14\n\x05label\x18\x03\x20\x03(\tR\x05label\
    \x12\x16\n\x06idOnly\x18\x04\x20\x01(\x08R\x06idOnly\"\x8f\x01\n\x0cEdge\
    sReponse\x12\x12\n\x04size\x18\x01\x20\x01(\x05R\x04size\x12\x14\n\x05sr\
    cid\x18\x02\x20\x01(\x03R\x05srcid\x12\x14\n\x05label\x18\x03\x20\x01(\t\
    R\x05label\x12+\n\x06dstids\x18\x04\x20\x03(\x0b2\x13.tinkerpop.VertexId\
    R\x06dstids\x12\x12\n\x04pros\x18\x05\x20\x03(\x0cR\x04pros\"\x9d\x01\n\
    \x10LimitEdgeRequest\x12)\n\x03req\x18\x01\x20\x01(\x0b2\x17.tinkerpop.E\
    dgesRequestR\x03req\x12\x14\n\x05order\x18\x02\x20\x01(\x08R\x05order\
    \x12\x1a\n\x08orderKey\x18\x03\x20\x03(\tR\x08orderKey\x12\x14\n\x05limi\
    t\x18\x04\x20\x01(\x05R\x05limit\x12\x16\n\x06idOnly\x18\x05\x20\x01(\
    \x08R\x06idOnly\"\x99\x01\n\x11LimitEdgesReponse\x12+\n\x06source\x18\
    \x01\x20\x01(\x0b2\x13.tinkerpop.VertexIdR\x06source\x12+\n\x06destin\
    \x18\x02\x20\x01(\x0b2\x13.tinkerpop.VertexIdR\x06destin\x12\x16\n\x06ty\
    peId\x18\x03\x20\x01(\x05R\x06typeId\x12\x12\n\x04pros\x18\x04\x20\x01(\
    \x0cR\x04pros2\xa6\x02\n\x0eGremlinService\x12>\n\x08getEdges\x12\x17.ti\
    nkerpop.EdgesRequest\x1a\x17.tinkerpop.EdgesReponse0\x01\x12C\n\ngetVert\
    exs\x12\x18.tinkerpop.VertexRequest\x1a\x19.tinkerpop.VertexResponse0\
    \x01\x12L\n\rgetLimitEdges\x12\x1b.tinkerpop.LimitEdgeRequest\x1a\x1c.ti\
    nkerpop.LimitEdgesReponse0\x01\x12A\n\x04scan\x12\x1c.tinkerpop.VertexSc\
    anRequest\x1a\x19.tinkerpop.VertexResponse0\x01B\x1c\n\x1acom.alibaba.ma\
    xgraph.protob\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
